{
  "爬取时间": "2025-08-27 08:39:46",
  "爬取方式": "改进的基于文本内容提取",
  "总计API数量": 308,
  "成功爬取": 308,
  "失败页面数": 0,
  "数据质量统计": {
    "有API名称": 304,
    "有功能说明": 95,
    "有函数原型": 91,
    "有参数说明": 67,
    "有返回值说明": 61,
    "有调用示例": 81
  },
  "APIs": [
    {
      "API名称": "GeGLU",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0786.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "FusedMulAddRelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0051.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WholeReduceMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0080.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LoadImageToLocal",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0241.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "REGISTER_TILING_DATA_CLASS",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1006.html",
      "功能说明": "功能说明注册定义的TilingData结构体并和自定义算子绑定。",
      "函数原型": "注册算子tilingdata类到对应的AddCustom算子 REGISTER_TILING_DATA_CLASS(AddCustom, AddCustomTilingData)",
      "参数说明": [],
      "返回值": ":make_shared<class_name>();",
      "调用示例": ""
    },
    {
      "API名称": "ReadSpmBuffer",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0168.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Ln",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0026.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SoftMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0754.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WaitPreBlock",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0207.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ScalarGetSFFValue",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0020.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "min",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10054.html",
      "功能说明": "2template <typename T, typename U> __aicore__ inline T min(const T src0, const U src1)",
      "函数原型": "__aicore__ inline T min(const T src0, const U src1)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "int64_t result = AscendC::Std::min(src0, src1);"
    },
    {
      "API名称": "CompareScalar",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0068.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "MulAddDst",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0048.html",
      "功能说明": "按元素将src0Local和src1Local相乘并和dstLocal相加，将最终结果存放进dstLocal中。计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void MulAddDst(const LocalTensor<T>& dstLocal, const LocalTensor<U>& src0Local, const LocalTensor<U>& src1Local, const uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [],
      "返回值": "[ 4.71345850e+03  2.46985229e+03 -8.27969437e+01 -3.20867920e+03",
      "调用示例": "template <typename T, typename U> __aicore__ inline void MulAddDst(const LocalTensor<T>& dstLocal, const LocalTensor<U>& src0Local, const LocalTensor<U>& src1Local, const int32_t& calCount) tensor高维切分计算 mask逐bit模式 1 2 template <typename T, typename U, bool isSetMask = true> __aicore__ inline void MulAddDst(const LocalTensor<T>& dstLocal, const LocalTensor<U>& src0Local, const LocalTensor<U>& src1Local, const uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams) mask连续模式 1 2 template <typename T, typename U, bool isSetMask = true> __aicore__ inline void MulAddDst(const LocalTensor<T>& dstLocal, const LocalTensor<U>& src0Local, const LocalTensor<U>& src1Local, uint64_t mask, const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams) 参数说明 表1 模板参数说明 参数名 描述 T 目的操作数数据类型。目的操作数和源操作数的数据类型约束请参考表3。 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：half/float Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：half/float Atlas 推理系列产品 AI Core，支持的数据类型为：half/float Atlas 200I/500 A2 推理产品 ， 支持的数据类型为：int16_t/uint16_t/half/int32_t/uint32_t/float U 源操作数数据类型。 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：half/float Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：half/float Atlas 推理系列产品 AI Core，支持的数据类型为：half/float Atlas 200I/500 A2 推理产品 ， 支持的数据类型为：int16_t/uint16_t/half/int32_t/uint32_t/float isSetMask 是否在接口内部设置mask。 true，表示在接口内部设置mask。 false，表示在接口外部设置mask，开发者需要使用SetVectorMask接口设置mask值。这种模式下，本接口入参中的mask值必须设置为占位符MASK_PLACEHOLDER。 表2 参数说明 参数名 输入/输出 描述 dstLocal 输出 目的操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 src0Local、src1Local 输入 源操作数。源操作数数据类型和目的操作数数据类型可以不一致。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 calCount 输入 参与计算的元素个数。 mask[]/mask 输入 mask用于控制每次迭代内参与计算的元素。 逐bit模式：可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与。 mask为数组形式，数组长度和数组元素的取值范围和操作数的数据类型有关。当操作数为16位时，数组长度为2，mask[0]、mask[1]∈[0, 264-1]并且不同时为0；当操作数为32位时，数组长度为1，mask[0]∈(0, 264-1]；当操作数为64位时，数组长度为1，mask[0]∈(0, 232-1]。 例如，mask=[8, 0]，8=0b1000，表示仅第4个元素参与计算。 连续模式：表示前面连续的多少个元素参与计算。取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为16位时，mask∈[1, 128]；当操作数为32位时，mask∈[1, 64]；当操作数为64位时，mask∈[1, 32]。 repeatTimes 输入 重复迭代次数。矢量计算单元，每次读取连续的256Bytes数据进行计算，为完成对输入数据的处理，必须通过多次迭代（repeat）才能完成所有数据的读取与计算。repeatTimes表示迭代的次数。 关于该参数的具体描述请参考如何使用Tensor高维切分计算API。 repeatParams 输入 控制操作数地址步长的参数。BinaryRepeatParams类型，包含操作数相邻迭代间相同datablock的地址步长，操作数同一迭代内不同datablock的地址步长等参数。 相邻迭代间的地址步长参数说明请参考repeatStride；同一迭代内DataBlock的地址步长参数说明请参考dataBlockStride。 表3 数据类型约束 src0Local数据类型 src1Local数据类型 dstLocal数据类型 PAR 支持的型号 half half half 128 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 Atlas A3 训练系列产品/Atlas A3 推理系列产品 Atlas 推理系列产品 AI Core Atlas 200I/500 A2 推理产品 float float float 64 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 Atlas A3 训练系列产品/Atlas A3 推理系列产品 Atlas 推理系列产品 AI Core Atlas 200I/500 A2 推理产品 half half float 64 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 Atlas A3 训练系列产品/Atlas A3 推理系列产品 Atlas 推理系列产品 AI Core int16_t int16_t int16_t 128 Atlas 200I/500 A2 推理产品 uint16_t uint16_t uint16_t 128 Atlas 200I/500 A2 推理产品 int32_t int32_t int32_t 64 Atlas 200I/500 A2 推理产品 uint32_t uint32_t uint32_t 64 Atlas 200I/500 A2 推理产品 返回值 无 约束说明 使用高维切分计算接口时，节省地址空间，开发者可以定义一个Tensor，供源操作数与目的操作数同时使用（即地址重叠），相关约束如下： 单次迭代内，要求源操作数和目的操作数之间100%重叠，不支持部分重叠。 多次迭代间，第N次目的操作数是第N+1次源操作数的情况下，是不支持地址重叠的，因为第N+1次依赖第N次的结果。 源操作数的数据类型为half、目的操作数的数据类型为float的情况下，源操作数和目的操作数无法100%重叠，故不支持地址重叠。 操作数地址偏移对齐要求请参见通用约束。 调用示例 本样例中只展示Compute流程中的部分代码。如果您需要运行样例代码，请将该代码段拷贝并替换双目指令样例模板更多样例中的Compute函数即可。 高维切分计算接口样例-mask连续模式（源操作数的数据类型为half、目的操作数的数据类型为float） 1 2 3 4 5 uint64_t mask = 64; // repeatTimes = 4, 一次迭代计算64个数, 共计算256个数 // dstBlkStride, src0BlkStride, src1BlkStride = 1, 单次迭代内数据连续读取和写入 // dstRepStride = 8, src0RepStride, src1RepStride = 4, 相邻迭代间数据连续读取和写入 AscendC::MulAddDst(dstLocal, src0Local, src1Local, 64, 4, { 1, 1, 1, 8, 4, 4 })"
    },
    {
      "API名称": "GetICachePreloadStatus",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0277.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0077.html",
      "功能说明": "在所有的输入数据中找出最小值及最小值对应的索引位置。归约指令的总体介绍请参考如何使用归约指令。ReduceMin计算原理参考ReduceMax。 tensor前n个数据计算",
      "函数原型": "__aicore__ inline KernelReduce()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "取值",
          "类型": "",
          "说明": "true：同时获取最小值和最小值索引"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "不获取索引，只获取最小值"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "中，计算结果为[0.01034, 2.104e-05]，2.104e-05需要使用reinterpret_cast方法转换得到索引值353。转换示例如下：",
      "调用示例": "float minIndex = dst.GetValue(1); uint32_t realIndex = *reinterpret_cast<uint32_t*>(&minIndex);"
    },
    {
      "API名称": "Sort",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0842.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DataCacheCleanAndInvalid",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0177.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "RmsNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0804.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetMaskNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0095.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "make_tuple",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10110.html",
      "功能说明": "2template <typename ...Tps> __aicore__ inline constexpr tuple<unwrap_decay_t<Tps>...> make_tuple(Tps&& ...args);",
      "函数原型": "__aicore__ inline constexpr tuple<unwrap_decay_t<Tps>...> make_tuple(Tps&& ...args)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int4b_t，int8_t，uint8_t，int16_t，uint16_t，int32_t，uint32_t，uint64_t，int64_t，half，float，bfloat16_t，bool，LocalTensor，GlobalTensor"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int4b_t，int8_t，uint8_t，int16_t，uint16_t，int32_t，uint32_t，uint64_t，int64_t，half，float，bfloat16_t，bool，LocalTensor，GlobalTensor"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename ...Tps> __aicore__ inline constexpr tuple<unwrap_decay_t<Tps>...> make_tuple(Tps&& ...args)"
    },
    {
      "API名称": "GetReduceMaxMinCount",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0226.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0003",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0003.html",
      "功能说明": "在实现Host侧的Tiling函数时，可能需要获取一些硬件平台的信息，来支撑Tiling的计算，比如获取硬件平台的核数等信息。平台信息获取API提供获取这些平台信息的功能。 算子调测API：用于算子调测的API，包括孪生调试，性能调测等。 进行Ascend C算子Host侧编程时，需要使用基础数据结构和API，请参考基础数据结构与接口；完成算子开发后，需要使用Runtime API完成算子的调用，请参考“AscendCL API（C）”。",
      "函数原型": "用于Ascend C算子原型定义和注册的API。",
      "参数说明": [
        {
          "参数名": "API",
          "类型": "",
          "说明": "kernel侧高阶API配套的Tiling API，方便开发者获取kernel计算时所需的Tiling参数"
        },
        {
          "参数名": "C算子原型注册与管理API",
          "类型": "",
          "说明": "用于Ascend C算子原型定义和注册的API"
        },
        {
          "参数名": "Tiling数据结构注册API",
          "类型": "",
          "说明": "用于Ascend C算子TilingData数据结构定义和注册的API"
        },
        {
          "参数名": "平台信息获取API",
          "类型": "",
          "说明": "在实现Host侧的Tiling函数时，可能需要获取一些硬件平台的信息，来支撑Tiling的计算，比如获取硬件平台的核数等信息"
        },
        {
          "参数名": "算子调测API",
          "类型": "",
          "说明": "用于算子调测的API，包括孪生调试，性能调测等"
        }
      ],
      "返回值": "在/tmp目录下创建一个共享文件，并返回该文件的映射指针。",
      "调用示例": ""
    },
    {
      "API名称": "Erfc",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0548.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LoadDataWithSparse",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0244.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SwiGLU",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0776.html",
      "功能说明": "其中Swish激活函数的计算公式如下（β为常量）： 函数原型通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount)",
      "函数原型": "__aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const LocalTensor<uint8_t>& sharedTmpBuffer) 接口框架申请临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, LocalTensor<T>& srcTensor0, LocalTensor<T>& srcTensor1, const float& scalarValue)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[-0.0858   0.05927 -2.523    0.3425  -0.1504  -0.575   -0.3157  -0.912",
      "调用示例": "template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const LocalTensor<uint8_t>& sharedTmpBuffer) 接口框架申请临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor0, const LocalTensor<T>& srcTensor1, const float& scalarValue, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void SwiGLU(LocalTensor<T>& dstTensor, LocalTensor<T>& srcTensor0, LocalTensor<T>& srcTensor1, const float& scalarValue)"
    },
    {
      "API名称": "Trap",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0196.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Gelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0771.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Sum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0826.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ConfusionTranspose",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0865.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetFmatrix",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0245.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ResetMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0097.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Or",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0042.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ShiftRight",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0059.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceAll",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10145.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Div",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0038.html",
      "功能说明": "按元素求商，公式表达如下： 整个tensor参与计算",
      "函数原型": "__aicore__ inline void Init(__gm__ uint8_t* src0Gm, __gm__ uint8_t* src1Gm, __gm__ uint8_t* dstGm)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[0.5 1.0 1.5 ... 256.0]",
      "调用示例": "输入数据(src0Local): [1.0 2.0 3.0 ... 512.0] 输入数据(src1Local): [2.0 2.0 2.0 ... 2.0] 输出数据(dstLocal): [0.5 1.0 1.5 ... 256.0]"
    },
    {
      "API名称": "AddRelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0043.html",
      "功能说明": "按元素求和，再进行Relu计算（结果和0对比取较大值）。计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void AddRelu(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[2 1 0 ... 0]",
      "调用示例": "输入数据(src0Local): [1 -2 3 ... -6] 输入数据(src1Local): [1 3 -4 ... 5] 输出数据(dstLocal): [2 1 0 ... 0]"
    },
    {
      "API名称": "SetVectorMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0096.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ProposalConcat",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0227.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "CountBitsCntSameAsSignBit",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0019.html",
      "功能说明": "当输入是-1（比特位全1）或者0（比特位全0）时，返回-1。 函数原型1__aicore__ inline int64_t CountBitsCntSameAsSignBit(int64_t valueIn)",
      "函数原型": "__aicore__ inline int64_t CountBitsCntSameAsSignBit(int64_t valueIn)",
      "参数说明": [],
      "返回值": "3",
      "调用示例": "// 输出数据(ans): 3 int64_t ans = AscendC::CountBitsCntSameAsSignBit(valueIn);"
    },
    {
      "API名称": "Tan",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0532.html",
      "功能说明": "Tan(x)的泰勒展开式为： 其中B2n是伯努利数。 函数原型通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false>",
      "函数原型": "inline void Tan(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[-0.11289082  1.04806128  1.33812286 ...  -0.96219541 1.02953215 ]",
      "调用示例": "2输入数据(srcLocal): [-0.11241488 0.80886058 4.07060815 ... -3.90772673 60.49020877] 输出数据(dstLocal): [-0.11289082 1.04806128 1.33812286 ... -0.96219541 1.02953215 ]"
    },
    {
      "API名称": "Compare",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0066.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "CumSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0605.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Compare",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0067.html",
      "功能说明": "逐元素比较两个tensor大小，如果比较后的结果为真，则输出结果的对应比特位为1，否则为0。Compare接口需要mask参数时，可以使用此接口。计算结果存放入寄存器中。 LT：小于（less than） GT：大于（greater than）",
      "函数原型": "__aicore__ inline KernelCmpCmpmask()",
      "参数说明": [
        {
          "参数名": "支持多种比较模式",
          "类型": "",
          "说明": "LT：小于（less than）"
        },
        {
          "参数名": "GT",
          "类型": "",
          "说明": "大于（greater than）"
        },
        {
          "参数名": "GE",
          "类型": "",
          "说明": "大于或等于（greater than or equal to）"
        },
        {
          "参数名": "EQ",
          "类型": "",
          "说明": "等于（equal to）"
        },
        {
          "参数名": "NE",
          "类型": "",
          "说明": "不等于（not equal to）"
        },
        {
          "参数名": "LE",
          "类型": "",
          "说明": "小于或等于（less than or equal to）"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "LT",
          "类型": "",
          "说明": "src0小于（less than）src1"
        }
      ],
      "返回值": "[122  86 237  94 150   3 226 242]",
      "调用示例": "uint64_t mask = 256 / sizeof(float); // 256为每个迭代处理的字节数"
    },
    {
      "API名称": "Mul",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0037.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SoftmaxGradFront",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0759.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Gather",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0092.html",
      "功能说明": "给定输入的张量和一个地址偏移张量，本接口根据偏移地址将输入张量按元素收集到结果张量中。 tensor前n个数据计算",
      "函数原型": "__aicore__ inline void Init(__gm__ uint8_t* dstGm, __gm__ uint8_t* srcGm, __gm__ uint8_t* srcOffsetGm, const uint32_t count)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/int32_t/uint32_t/float/half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/int32_t/uint32_t/float/half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/int32_t/uint32_t/float/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half/uint32_t/int32_t/float"
        },
        {
          "参数名": "地址偏移的取值范围如下",
          "类型": "",
          "说明": "当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可，超出取值范围可能导致非预期输出"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "数据范围",
          "类型": "",
          "说明": "repeatTimes∈[0,255]"
        },
        {
          "参数名": "针对以下型号",
          "类型": "",
          "说明": "Atlas 200I/500 A2 推理产品"
        }
      ],
      "返回值": "当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可，超出取值范围可能导致非预期输出。",
      "调用示例": "template <typename T> __aicore__ inline void Gather(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& srcOffsetLocal, const uint32_t srcBaseAddr, const uint32_t count) tensor高维切分计算 mask逐bit模式 1 2 template <typename T> __aicore__ inline void Gather(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& srcOffsetLocal, const uint32_t srcBaseAddr, const uint64_t mask[], const uint8_t repeatTimes, const uint16_t dstRepStride) mask连续模式 1 2 template <typename T> __aicore__ inline void Gather(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& srcOffsetLocal, const uint32_t srcBaseAddr, const uint64_t mask, const uint8_t repeatTimes, const uint16_t dstRepStride) 参数说明 表1 模板参数说明 参数名 描述 T 操作数数据类型。 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：int16_t/uint16_t/int32_t/uint32_t/float/half/bfloat16_t Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：int16_t/uint16_t/int32_t/uint32_t/float/half/bfloat16_t Atlas 推理系列产品 AI Core，支持的数据类型为：int16_t/uint16_t/int32_t/uint32_t/float/half Atlas 200I/500 A2 推理产品 ，支持的数据类型为：uint8_t/int8_t/uint16_t/int16_t/half/uint32_t/int32_t/float 表2 参数说明 参数名称 输入/输出 含义 dstLocal 输出 目的操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 srcLocal 输入 源操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 数据类型和dstLocal保持一致。 srcOffsetLocal 输入 每个元素在src中对应的地址偏移。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 该偏移量相对于src的起始基地址而言。单位为Bytes。地址偏移要大于等于0，取值应保证src元素类型位宽对齐，否则会导致非预期行为；同时需要保证偏移地址后不能超出UB大小数据的范围。 针对以下型号，地址偏移的取值范围不超出uint32_t的范围即可。 Atlas 推理系列产品 AI Core Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 Atlas A3 训练系列产品/Atlas A3 推理系列产品 针对以下型号，地址偏移的取值范围如下：当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可，超出取值范围可能导致非预期输出。 Atlas 200I/500 A2 推理产品 srcBaseAddr 输入 srcLocal的起始基地址，单位为Bytes。取值应保证src元素类型位宽对齐，否则会导致非预期行为。 count 输入 执行处理的数据个数。 mask/mask[] 输入 mask用于控制每次迭代内参与计算的元素。 连续模式：表示前面连续的多少个元素参与计算。取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为8位或16位时，mask∈[1, 128]；当操作数为32位时，mask∈[1, 64]；当操作数为64位时，mask∈[1, 32]。 逐bit模式：可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与。参数类型为长度为2的uint64_t类型数组。 例如，mask=[8, 0]，8=0b1000，表示仅第4个元素参与计算。 参数取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为8位或16位时，mask[0]、mask[1]∈[0, 264-1]并且不同时为0；当操作数为32位时，mask[1]为0，mask[0]∈(0, 264-1]；当操作数为64位时，mask[1]为0，mask[0]∈(0, 232-1]。 repeatTimes 输入 指令迭代次数，每次迭代完成8个datablock（32Bytes）的数据收集，数据范围：repeatTimes∈[0,255]。 特别地，针对以下型号： Atlas 200I/500 A2 推理产品 操作数为8位时，每次迭代完成4个datablock（32Bytes）的数据收集。 dstRepStride 输入 相邻迭代间的地址步长，单位是datablock（32Bytes）。 约束说明 操作数地址偏移对齐要求请参见通用约束。 为了节省地址空间，开发者可以定义一个Tensor，供源操作数与目的操作数同时使用（即地址重叠），相关约束如下 对于单次repeat（repeatTimes=1），支持源操作数与目的操作数之间要求100%完全重叠，不支持部分重叠。 对于多次repeat（repeatTimes>1），不支持源操作数与目的操作数在迭代间存在依赖。例如当第N次迭代的目的操作数是第N+1次的源操作数时，不支持地址重叠。 调用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #include \"kernel_operator.h\" template <typename T> class GatherTest { public: __aicore__ inline GatherTest()"
    },
    {
      "API名称": "SoftmaxGrad",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0757.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "MrgSort4",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0230.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Sub",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0036.html",
      "功能说明": "按元素求差，计算公式如下： 整个tensor参与计算",
      "函数原型": "inline void Sub(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[-512 -512 -512 ... -512]",
      "调用示例": "输入数据(src0Local): [1 2 3 ... 512] 输入数据(src1Local): [513 514 515 ... 1024] 输出数据(dstLocal): [-512 -512 -512 ... -512]"
    },
    {
      "API名称": "API_0945",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0945.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "PipeBarrier",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0271.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "InitGlobalMemory",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0891.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetAccVal",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0225.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SubReluCast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0047.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetAtomicNone",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0212.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "AdjustSoftMaxRes",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0760.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Sin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0500.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Not",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0031.html",
      "功能说明": "按元素做按位取反，计算公式如下 : tensor前n个数据计算",
      "函数原型": "inline void Not(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, uint64_t mask[], const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[-10 1 -9 ... -10 -1]",
      "调用示例": "输入数据(srcLocal): [9 -2 8 ... 9 0] 输出数据(dstLocal): [-10 1 -9 ... -10 -1]"
    },
    {
      "API名称": "Acos",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0504.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GET_TILING_DATA_WITH_STRUCT",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0215.html",
      "功能说明": "GET_TILING_DATA只能获取默认注册的结构体，该接口可以根据指定的结构体名称获取对应的结构体，常用于针对不同的TilingKey注册了不同结构体的情况下。 函数原型1GET_TILING_DATA_WITH_STRUCT(struct_name, tiling_data, tiling_arg)",
      "函数原型": "void add_custom(__gm__ uint8_t *x, __gm__ uint8_t *y, __gm__ uint8_t *z, __gm__ uint8_t *tiling)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TRACE_START",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1212.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GmAlloc",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1207.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LayerNormGradBeta",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0799.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Silu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0780.html",
      "功能说明": "2template <typename T, bool isReuseSource = false> __aicore__ inline void Silu(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, uint32_t dataSize)",
      "函数原型": "__aicore__ inline void Silu(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, uint32_t dataSize)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[3.185546875 0.77587890625 ... -0.272216796875]",
      "调用示例": "2输入数据(srcLocal):[3.304723 1.04788 ... -1.0512] 输出数据(dstLocal): [3.185546875 0.77587890625 ... -0.272216796875]"
    },
    {
      "API名称": "ICPU_SET_TILING_KEY",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1209.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DataCopyPad",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0265.html",
      "功能说明": "函数原型dataCopyParams为DataCopyExtParams类型，相比于DataCopyParams类型，支持的操作数步长等参数取值范围更大通路：Global Memory->Local Memory1 2template <typename T> __aicore__ inline void DataCopyPad(const LocalTensor<T> &dstLocal, const GlobalTensor<T> &srcGlobal, const DataCopyExtParams &dataCopyParams, const DataCopyPadExtParams<T> &padParams) 通路：Local Memory->Global Memory1",
      "函数原型": "__aicore__ inline void DataCopyPad(const LocalTensor<T> &dstLocal, const GlobalTensor<T> &srcGlobal, const DataCopyExtParams &dataCopyParams, const DataCopyPadExtParams<T> &padParams)",
      "参数说明": [
        {
          "参数名": "支持的操作数步长等参数取值范围更大通路",
          "类型": "",
          "说明": "Global Memory->Local Memory1"
        },
        {
          "参数名": "通路",
          "类型": "",
          "说明": "Local Memory->Global Memory1"
        },
        {
          "参数名": "通路",
          "类型": "",
          "说明": "Local Memory->Local Memory，实际搬运过程是VECIN/VECOUT->GM->TSCM1"
        },
        {
          "参数名": "dataCopyParams为DataCopyParams类型通路",
          "类型": "",
          "说明": "Global Memory->Local Memory1"
        },
        {
          "参数名": "通路",
          "类型": "",
          "说明": "Local Memory->Global Memory1"
        },
        {
          "参数名": "通路",
          "类型": "",
          "说明": "Local Memory->Local Memory，实际搬运过程是VECIN/VECOUT->GM->TSCM1"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t/int16_t/uint16_t/float/int32_t/uint32_t/int8_t/uint8_t/int64_t/uint64_t/double"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t/int16_t/uint16_t/float/int32_t/uint32_t/int8_t/uint8_t/int64_t/uint64_t/double"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/half/bfloat16_t/int16_t/uint16_t/float/int32_t/uint32_t"
        }
      ],
      "返回值": "[1 2 3 ... 20]",
      "调用示例": "配置示例1：blockLen为64，每个连续传输数据块包含64Bytes；srcStride为1，因为源操作数的逻辑位置为GM，srcStride的单位为Byte，也就是说源操作数相邻数据块之间间隔1Byte；dstStride为1，因为目的操作数的逻辑位置为VECIN/VECOUT，dstStride的单位为dataBlock(32Bytes)，也就是说目的操作数相邻数据块之间间隔1个dataBlock。blockLen+leftPadding+rightPadding满足32字节对齐，isPad为false，左右两侧填充的数据值会默认为随机值；否则为paddingValue。此处示例中，leftPadding、rightPadding均为0，则不填充。blockLen+leftPadding+rightPadding不满足32字节对齐时，框架会填充一些假数据dummy，保证左右填充的数据和blockLen、假数据为32字节对齐。leftPadding/rightPadding不为0：若isPad为false，左右两侧填充的数据值和dummy值均为随机值；否则为paddingValue。 VECIN/VECOUT->GM当每个连续传输数据块长度blockLen为32字节对齐时，下图呈现了需要传入的DataCopyParams示例，blockLen为64，每个连续传输数据块包含64Bytes；srcStride为1，因为源操作数的逻辑位置为VECIN/VECOUT，srcStride的单位为dataBlock(32Bytes)，也就是说源操作数相邻数据块之间间隔1个dataBlock；dstStride为1，因为目的操作数的逻辑位置为GM，dstStride的单位为Byte，也就是说目的操作数相邻数据块之间间隔1Byte。 从VECIN/VECOUT->GM的搬运，数据存储格式没有发生转变，依然是ND。blockCount为需要搬运的连续传输数据块个数，设置为3；blockLen为一个连续传输数据块的大小(单位为Byte)，设置为6 * 32 = 192；srcStride为源操作数相邻连续数据块的间隔（前面一个数据块的尾与后面数据块的头的间隔），源操作数逻辑位置为VECIN/VECOUT，其单位为datablock，两个连续传输数据块（A1~A6、B1~B6）中间相隔1个A7，因此srtStride设置为1；dstStride为目的操作数，相邻连续数据块间的间隔（前面一个数据块的尾与后面数据块的头的间隔），目的操作数逻辑位置为GM，其单位为Byte，两个连续传输数据块（A1~A6、B1~B6）中间相隔2个空白的datablock，因此dstStride设置为64Byte。 从GM->TSCM的搬运，数据存储格式由ND转换为NZ。ndNum固定为1，即A1~A6、B1~B6、C1~C6视作一整个ndMatrix；nValue为ndMatrix的行数，即为3行；dValue为ndMatrix中一行包含的元素个数，即为6 * 16 = 96个元素；srcNdMatrixStride为相邻ndMatrix之间的距离，因为仅涉及1个ndMatrix，所以可填为0；srcDValue表明ndMatrix的第x行和第x+1行所相隔的元素个数，如A1~B1的距离，即为8个datablock，8 * 16 = 128个元素；dstNzC0Stride为src同一行的相邻datablock在NZ矩阵中相隔datablock数，如A1~A2的距离，即为7个datablock (A1 + 空白 + B1 + 空白 + C1 + 空白 * 2)；dstNzNStride为src中ndMatrix的相邻行在NZ矩阵中相隔多少个datablock，如A1~B1的距离，即为2个datablock (A1 + 空白) ；dstNzMatrixStride为相邻NZ矩阵之间的元素个数，因为仅涉及1个NZ矩阵，所以可以填为1。"
    },
    {
      "API名称": "CrossCoreSetFlag",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0273.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "MrgSort",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0232.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "CreateVecIndex",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0090.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ICPU_RUN_KF",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1208.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ClampMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0576.html",
      "功能说明": "函数原型通过sharedTmpBuffer入参传入临时空间1 2template <typename T, bool isReuseSource = false> __aicore__ inline void ClampMax(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const T scalar, const uint32_t calCount) 接口框架申请临时空间1",
      "函数原型": "__aicore__ inline void ClampMax(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const T scalar, const uint32_t calCount) 接口框架申请临时空间1 2template <typename T, bool isReuseSource = false> __aicore__ inline void ClampMax(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const T scalar, const uint32_t calCount)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[0 0 0  ...  2 2]",
      "调用示例": "pipe.InitBuffer(tmpQue, 1, bufferSize); AscendC::LocalTensor<uint8_t> sharedTmpBuffer = tmpQue.AllocTensor<uint8_t>();"
    },
    {
      "API名称": "Tanh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0492.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetFixpipeNz2ndFlag",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0253.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Min",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0040.html",
      "功能说明": "按元素求最小值，公式表达如下： tensor前n个数据计算",
      "函数原型": "inline void Min(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/int32_t/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[1 2 3 ... 2]",
      "调用示例": "输入数据(src0Local): [1 2 3 ... 512] 输入数据(src1Local): [513 512 511 ... 2] 输出数据(dstLocal): [1 2 3 ... 2]"
    },
    {
      "API名称": "SetMaskCount",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0094.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ParamStruct",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00011.html",
      "功能说明": "通过以下函数原型进行模板参数ASCENDC_TPL_ARGS_DECL和模板参数组合ASCENDC_TPL_ARGS_SEL（即可使用的模板）的定义。详细内容请参考Tiling模板编程。",
      "函数原型": "define ASCENDC_TPL_UINT_DECL(x, bw, ...)",
      "参数说明": [
        {
          "参数名": "std",
          "类型": "",
          "说明": ":vector<uint64_t> vals;"
        },
        {
          "参数名": "std",
          "类型": "",
          "说明": ":vector<uint64_t> inVals,"
        },
        {
          "参数名": "std",
          "类型": "",
          "说明": ":move(inVals)),"
        },
        {
          "参数名": "std",
          "类型": "",
          "说明": ":vector<ParamStruct>;"
        },
        {
          "参数名": "std",
          "类型": "",
          "说明": ":vector<std::vector<ParamStruct>>;"
        },
        {
          "参数名": "args0",
          "类型": "",
          "说明": "表示算子Optype"
        },
        {
          "参数名": "argsn",
          "类型": "",
          "说明": "后续为若干个DTYPE、FORMAT、UINT、BOOL的模板参数定义，分别通过ASCENDC_TPL_DTYPE_DECL、ASCENDC_TPL_FORMAT_DECL、ASCENDC_TPL_UINT_DECL、ASCENDC_TPL_BOOL_DECL进行定义"
        },
        {
          "参数名": "args0",
          "类型": "",
          "说明": "参数名"
        },
        {
          "参数名": "argsn",
          "类型": "",
          "说明": "后续若干个参数为穷举的DataType枚举值"
        },
        {
          "参数名": "args0",
          "类型": "",
          "说明": "参数名"
        }
      ],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Fixpipe",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0251.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "PairReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0085.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DropOut",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0862.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GmFree",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1210.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Reciprocal",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0028.html",
      "功能说明": "按元素取倒数，计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void Reciprocal(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, uint64_t mask[], const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[-0.1396 -0.1382 0.5645 ... -0.748 0.2231]",
      "调用示例": "输入数据(srcLocal): [-7.152 -7.24 1.771 ... -1.339 4.473] 输出数据(dstLocal):"
    },
    {
      "API名称": "Max",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0039.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetTPipePtr",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0120.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetPadValue",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0266.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SoftmaxFlashV3",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10001.html",
      "功能说明": "update为false： update为true： 本接口当前只支持ND格式的输入，内部的reduce过程按last轴处理。 为方便理解，通过Python伪代码实现的方式，表达其计算公式如下。其中，repeatSize为64，elementNumPerBlk/BlkcntPerRepeat为8，splitMeanCnt为8，src、inmean、inmax、 insum、update为输入，dst、x_mean、x_sum、x_max、exp_max为输出。 1",
      "函数原型": "__aicore__ inline void SoftmaxFlashV3(const LocalTensor<T>& dstTensor, const LocalTensor<U>& meanTensor, const LocalTensor<U>& expSumTensor, const LocalTensor<U>& maxTensor, const LocalTensor<T>& srcTensor, const LocalTensor<T>& expMaxTensor, const LocalTensor<U>& inMeanTensor, const LocalTensor<U>& inExpSumTensor, const LocalTensor<U>& inMaxTensor, const SoftMaxTiling& tiling, const SoftMaxParams& params) 通过sharedTmpBuffer入参传入临时空间1 2template <typename T, typename U, bool isUpdate = false, bool isReuseSource = false, bool isBasicBlock = false, bool isDataFormatNZ = false, const SoftmaxConfig& config = SOFTMAX_DEFAULT_CFG> __aicore__ inline void SoftmaxFlashV3(const LocalTensor<T>& dstTensor, const LocalTensor<U>& meanTensor,const LocalTensor<U>& expSumTensor, const LocalTensor<U>& maxTensor, const LocalTensor<T>& srcTensor,const LocalTensor<T>& expMaxTensor, const LocalTensor<U>& inMeanTensor, const LocalTensor<U>& inExpSumTensor, const LocalTensor<U>& inMaxTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const SoftMaxTiling& tiling, const SoftMaxParams& params)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "float"
        },
        {
          "参数名": "具体定义如下",
          "类型": "",
          "说明": "1"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename T, typename U, bool isUpdate = false, bool isReuseSource = false, bool isBasicBlock = false, bool isDataFormatNZ = false, const SoftmaxConfig& config = SOFTMAX_DEFAULT_CFG> __aicore__ inline void SoftmaxFlashV3(const LocalTensor<T>& dstTensor, const LocalTensor<U>& meanTensor, const LocalTensor<U>& expSumTensor, const LocalTensor<U>& maxTensor, const LocalTensor<T>& srcTensor, const LocalTensor<T>& expMaxTensor, const LocalTensor<U>& inMeanTensor, const LocalTensor<U>& inExpSumTensor, const LocalTensor<U>& inMaxTensor, const SoftMaxTiling& tiling, const SoftMaxParams& params) 通过sharedTmpBuffer入参传入临时空间1 2template <typename T, typename U, bool isUpdate = false, bool isReuseSource = false, bool isBasicBlock = false, bool isDataFormatNZ = false, const SoftmaxConfig& config = SOFTMAX_DEFAULT_CFG> __aicore__ inline void SoftmaxFlashV3(const LocalTensor<T>& dstTensor, const LocalTensor<U>& meanTensor,const LocalTensor<U>& expSumTensor, const LocalTensor<U>& maxTensor, const LocalTensor<T>& srcTensor,const LocalTensor<T>& expMaxTensor, const LocalTensor<U>& inMeanTensor, const LocalTensor<U>& inExpSumTensor, const LocalTensor<U>& inMaxTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const SoftMaxTiling& tiling, const SoftMaxParams& params)"
    },
    {
      "API名称": "LoadUnzipIndex",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0242.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "printf",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0193.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ClampMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0577.html",
      "功能说明": "函数原型通过sharedTmpBuffer入参传入临时空间1 2template <typename T, bool isReuseSource = false> __aicore__ inline void ClampMin(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const T scalar, const uint32_t calCount) 接口框架申请临时空间1",
      "函数原型": "__aicore__ inline void ClampMin(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const T scalar, const uint32_t calCount) 接口框架申请临时空间1 2template <typename T, bool isReuseSource = false> __aicore__ inline void ClampMin(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const T scalar, const uint32_t calCount)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[2 2 2  ...  3 3]",
      "调用示例": "pipe.InitBuffer(tmpQue, 1, bufferSize); AscendC::LocalTensor<uint8_t> sharedTmpBuffer = tmpQue.AllocTensor<uint8_t>();"
    },
    {
      "API名称": "MrgSort",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0847.html",
      "功能说明": "Atlas A3 训练系列产品/Atlas A3 推理系列产品采用方式一 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件采用方式一 Atlas 推理系列产品AI Core采用方式二 排布方式一：MrgSort处理的数据一般是经过Sort处理后的数据，也就是Sort接口的输出，队列的结构如下所示：数据类型为float，每个结构占据8Bytes。",
      "函数原型": "__aicore__ inline void MrgSort(const LocalTensor<T> &dstLocal, const MrgSortSrcList<T> &sortList, const uint16_t elementCountList[4], uint32_t sortedNum[4], uint16_t validBit, const int32_t repeatTimes)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "参数取值如下",
          "类型": "",
          "说明": "false：直到所有队列耗尽完才停止合并"
        },
        {
          "参数名": "true",
          "类型": "",
          "说明": "某条队列耗尽后，停止合并"
        },
        {
          "参数名": "取值如下",
          "类型": "",
          "说明": "0b11：前两条队列有效0b111：前三条队列有效0b1111：四条队列全部有效"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "repeatTimes∈[1,255]"
        },
        {
          "参数名": "需要同时满足以下四个条件",
          "类型": "",
          "说明": "srcLocal包含四条队列并且validBit=15四个源队列的长度一致四个源队列连续存储isExhaustedSuspension为false"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "MrgSort处理的数据一般是经过Sort处理后的数据，也就是Sort接口的输出，队列的结构如下所示：数据类型为float，每个结构占据8Bytes。",
      "调用示例": "输入数据(srcValueGm): 128个float类型数据 输入数据(srcIndexGm):"
    },
    {
      "API名称": "Sign",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0552.html",
      "功能说明": "函数原型通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Sign(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1",
      "函数原型": "__aicore__ inline void Sign(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Sign(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer) 接口框架申请临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Sign(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Sign(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "函数原型通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1",
      "调用示例": "输入数据(srcLocal): [-inf, -2.0, -0.0, 0.0, nan, -nan, 2.0, inf] 输出数据(dstLocal): [-1, -1, 0, 0, 0, 0, 1, 1]"
    },
    {
      "API名称": "Unknown",
      "API文档URL": "https://www.hiascend.com/developer/ops",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GET_TILING_DATA",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0214.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ScalarCast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0018.html",
      "功能说明": "2template <typename srcT, typename dstT, RoundMode roundMode> __aicore__ inline dstT ScalarCast(srcT valueIn)",
      "函数原型": "__aicore__ inline dstT ScalarCast(srcT valueIn)",
      "参数说明": [
        {
          "参数名": "具体定义为",
          "类型": "",
          "说明": "1"
        },
        {
          "参数名": "相应支持的RoundMode如下",
          "类型": "",
          "说明": "f322f16：CAST_ODD"
        },
        {
          "参数名": "f322s32",
          "类型": "",
          "说明": "CAST_ROUND、CAST_CEIL、CAST_FLOOR、CAST_RINT"
        }
      ],
      "返回值": "3",
      "调用示例": "// 输出数据(valueOut): 3 int32_t valueOut = AscendC::ScalarCast<float, int32_t, AscendC::RoundMode::CAST_ROUND>(valueIn);"
    },
    {
      "API名称": "get",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10109.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SelectWithBytesMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0859.html",
      "功能说明": "给定两个源操作数src0和src1，根据maskTensor相应位置的值（非bit位）选取元素，得到目的操作数dst。选择的规则为：当Mask的值为0时，从src0中选取，否则从src1选取。 该接口支持多维Shape，需满足maskTensor和源操作数Tensor的前轴（非尾轴）元素个数相同，且maskTensor尾轴元素个数大于等于源操作数尾轴元素个数，maskTensor多余部分丢弃不参与计算。 maskTensor尾轴需32字节对齐且元素个数为16的倍数。 源操作数Tensor尾轴需32字节对齐。",
      "函数原型": "__aicore__ SelectWithBytesMaskShapeInfo()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t"
        },
        {
          "参数名": "定义如下",
          "类型": "",
          "说明": "1"
        }
      ],
      "返回值": "根据cmpmask的结果，选择srcTensor相应位置的值或者scalar值，输出Output。",
      "调用示例": "template <typename T, typename U, bool isReuseMask = true> __aicore__ inline void SelectWithBytesMask(const LocalTensor<T> &dst, const LocalTensor<T> &src0, T src1, const LocalTensor<U> &mask, const LocalTensor<uint8_t> &sharedTmpBuffer, const SelectWithBytesMaskShapeInfo &info) src0为srcScalar（scalar类型），src1为srcTensor（tensor类型） 1 2 template <typename T, typename U, bool isReuseMask = true> __aicore__ inline void SelectWithBytesMask(const LocalTensor<T> &dst, T src0, const LocalTensor<T> &src1, const LocalTensor<U> &mask, const LocalTensor<uint8_t> &sharedTmpBuffer, const SelectWithBytesMaskShapeInfo &info) 该接口需要额外的临时空间来存储计算过程中的中间变量。临时空间需要开发者申请并通过sharedTmpBuffer入参传入。临时空间大小BufferSize的获取方式如下：通过GetSelectWithBytesMaskMaxMinTmpSize中提供的接口获取需要预留空间范围的大小。 参数说明 表1 模板参数说明 参数名 描述 T 操作数的数据类型。 Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：half/float Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：half/float Atlas 推理系列产品 AI Core，支持的数据类型为：half/float U 掩码Tensor mask的数据类型。 Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t Atlas 推理系列产品 AI Core，支持的数据类型为：bool/uint8_t/int8_t/uint16_t/int16_t/uint32_t/int32_t isReuseMask 是否允许修改maskTensor。默认为true。 取值为true时，仅在maskTensor尾轴元素个数和srcTensor尾轴元素个数不同的情况下，maskTensor可能会被修改；其余场景，maskTensor不会修改。 取值为false时，任意场景下，maskTensor均不会修改，但可能会需要更多的临时空间。 表2 接口参数说明 参数名称 输入/输出 含义 dst 输出 目的操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 src0(srcTensor) src1(srcTensor) 输入 源操作数。源操作数Tensor尾轴需32字节对齐。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 src1(srcScalar) src0(srcScalar)"
    },
    {
      "API名称": "SetLoadDataPaddingValue",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0248.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "PlatformAscendCManager",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1039.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "IBSet",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0202.html",
      "功能说明": "2template <bool isAIVOnly = true> __aicore__ inline void IBSet(const GlobalTensor<int32_t>& gmWorkspace, const LocalTensor<int32_t>& ubWorkspace, int32_t blockIdx, int32_t eventID)",
      "函数原型": "__aicore__ inline KernelAdd()",
      "参数说明": [
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "[0, 核数-1]"
        }
      ],
      "返回值": "[2,2,2,2,2,...,2,3,3,3,3,3,...,3] //前256个数是2，后256个数是3",
      "调用示例": "template <bool isAIVOnly = true> __aicore__ inline void IBSet(const GlobalTensor<int32_t>& gmWorkspace, const LocalTensor<int32_t>& ubWorkspace, int32_t blockIdx, int32_t eventID) 参数说明 表1 模板参数说明参数名 描述 isAIVOnly 控制是否为AIVOnly模式，默认为true。 表2 接口参数说明参数名 输入/输出 描述 gmWorkspace 输出 外部存储核状态的公共缓存，类型为GlobalTensor。GlobalTensor数据结构的定义请参考GlobalTensor。 ubWorkspace 输入 存储当前核状态的公共缓存。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 blockIdx 输入 表示等待核的idx号，取值范围：[0, 核数-1]。 eventID 输入 用来控制当前核的set、wait事件。 返回值无 约束说明gmWorkspace申请的空间最少要求为：核数 * 32Bytes * eventID_max + blockIdx_max * 32Bytes + 32Bytes。（eventID_max和blockIdx_max分别指eventID、blockIdx的最大值 ）；注意：如果是AIVOnly模式，核数 = GetBlockNum()；如果是MIX模式，核数 = GetBlockNum()"
    },
    {
      "API名称": "BlockReduceMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0082.html",
      "功能说明": "对每个datablock内所有元素求最大值。归约指令的总体介绍请参考如何使用归约指令。",
      "函数原型": "__aicore__ inline KernelReduce()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[9.555, ..., 9.68, 0, ... 0]",
      "调用示例": "int32_t mask = 256/sizeof(half);"
    },
    {
      "API名称": "GetBlockIdx",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0185.html",
      "功能说明": "函数原型1__aicore__ inline int64_t GetBlockIdx()",
      "函数原型": "__aicore__ inline int64_t GetBlockIdx()",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "__aicore__ inline void Init(__gm__ uint8_t* src0Gm, __gm__ uint8_t* src1Gm, __gm__ uint8_t* dstGm)"
    },
    {
      "API名称": "ToFloat",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0022.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetArchVersion",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0187.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetMMLayoutTransform",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0260.html",
      "功能说明": "函数原型1__aicore__ inline void SetMMLayoutTransform(bool mmLayoutMode)",
      "函数原型": "__aicore__ inline void SetMMLayoutTransform(bool mmLayoutMode)",
      "参数说明": [
        {
          "参数名": "支持如下两种取值",
          "类型": "",
          "说明": "true：代表CUBE将首先通过N方向，然后通过M方向产生结果"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "代表CUBE将首先通过M方向，然后通过N方向生成结果"
        }
      ],
      "返回值": "无",
      "调用示例": "AscendC::SetMMLayoutTransform(mmLayoutMode); 父主题： 矩阵计算(ISASI)"
    },
    {
      "API名称": "SetDeqScale",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0099.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Axpy",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0585.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ASCENDC_TPL_SEL_PARAM",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00057.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "assert",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0194.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10055.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Gatherb",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0234.html",
      "功能说明": "给定一个输入的张量和一个地址偏移张量，本接口根据偏移地址按照DataBlock的粒度将输入张量收集到结果张量中。",
      "函数原型": "__aicore__ inline void Gatherb(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<uint32_t>& offsetLocal, const uint8_t repeatTimes, const GatherRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/uint32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/uint32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/float/int32_t/uint32_t/bfloat16_t/int64_t"
        },
        {
          "参数名": "数据范围",
          "类型": "",
          "说明": "repeatTimes∈（0,255]"
        }
      ],
      "返回值": "[",
      "调用示例": "输入数据(offsetLocal): [224 192 160 128 96 64 32 0] 输入数据(srcLocal): [0 1 2 3 4 5 6 7 ... 120 121 122 123 124 125 126 127] 输出数据(dstGlobal):["
    },
    {
      "API名称": "SetFixPipeConfig",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0252.html",
      "功能说明": "4template <typename T>",
      "函数原型": "inline void SetFixPipeConfig(const LocalTensor<T> &reluPre, const LocalTensor<T> &quantPre, bool isUnitFlag = false)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "8__aicore__inline void SetFPC(const LocalTensor <int32_t>& reluPreTensor, const LocalTensor <int32_t>& quantPreTensor)"
    },
    {
      "API名称": "CheckLocalMemoryIA",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0261.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DEVICE_IMPL_OP_OPTILING",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00060.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DataCopy",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0101.html",
      "功能说明": "函数原型源操作数为GlobalTensor，目的操作数为LocalTensor1",
      "函数原型": "__aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const GlobalTensor<T>& srcGlobal, const uint32_t calCount) // 支持连续和不连续 template <typename T> __aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const GlobalTensor<T>& srcGlobal, const DataCopyParams& repeatParams) 该原型接口支持的数据通路和数据类型如下所示： 表1 数据通路和数据类型（源操作数为GlobalTensor，目的操作数为LocalTensor）支持型号 数据通路（通过TPosition表达） 源操作数和目的操作数的数据类型 (两者保持一致) Atlas 训练系列产品 GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 训练系列产品 GM -> A1 / B1 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core GM -> A1 / B1 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品Vector Core GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 GM -> A1 / B1 / C1 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 GM -> A1 / B1 / C1 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas 200I/500 A2 推理产品 GM -> VECIN int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double 源操作数和目的操作数都为LocalTensor1 2 3 4 5 6 7// 支持连续 template <typename T> __aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const uint32_t calCount) // 支持连续和不连续 template <typename T> __aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const DataCopyParams& repeatParams) 该原型接口支持的数据通路和数据类型如下所示： 表2 数据通路和数据类型（源操作数和目的操作数都为LocalTensor）支持型号 数据通路（通过TPosition表达） 源操作数和目的操作数的数据类型 (两者保持一致) Atlas 训练系列产品 VECIN -> VECCALC，VECCALC->VECOUT int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core VECIN -> VECCALC，VECCALC->VECOUT int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core VECIN/VECCALC/VECOUT -> A1/B1 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 VECIN -> VECCALC，VECCALC->VECOUT int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 VECIN/VECCALC/VECOUT -> TSCM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 C1 -> C2 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 A1/B1/C1->C2PIPE2GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 VECIN -> VECCALC，VECCALC->VECOUT int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 VECIN/VECCALC/VECOUT -> TSCM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 C1 -> C2 int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 A1/B1/C1->C2PIPE2GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double 源操作数为LocalTensor，目的操作数为GlobalTensor1 2 3 4 5 6 7// 支持连续 template <typename T> __aicore__ inline void DataCopy(const GlobalTensor<T>& dstGlobal, const LocalTensor<T>& srcLocal, const uint32_t calCount) // 支持连续和不连续 template <typename T> __aicore__ inline void DataCopy(const GlobalTensor<T>& dstGlobal, const LocalTensor<T>& srcLocal, const DataCopyParams& repeatParams) 该原型接口支持的数据通路和数据类型如下所示： 表3 数据通路和数据类型（源操作数为LocalTensor，目的操作数为GlobalTensor）支持型号 数据通路（通过TPosition表达） 源操作数和目的操作数的数据类型 (两者保持一致) Atlas 训练系列产品 VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品AI Core CO2 -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas 推理系列产品Vector Core VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 A1/B1 -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas A3 训练系列产品/Atlas A3 推理系列产品 A1/B1 -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double Atlas 200I/500 A2 推理产品 VECOUT -> GM int8_t / uint8_t / int16_t / uint16_t / int32_t / uint32_t / int64_t / uint64_t / half / bfloat16_t / float / double 源操作数和目的操作数都为LocalTensor，支持源操作数和目的操作数类型不一致1 2template <typename dst_T, typename src_T> __aicore__ inline void DataCopy(const LocalTensor<dst_T>& dstLocal, const LocalTensor<src_T>& srcLocal, const DataCopyParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "说明",
          "类型": "",
          "说明": "DataCopy的搬运量要求为32byte的倍数，因此使用普通数据搬运接口（连续数据搬运，包含calCount参数）时，calCount * sizeof(T)需要32byte对齐，若不对齐，搬运量将对32byte做向下取整"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "blockCount∈[1, 4095]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "blockLen∈[1, 65535]"
        }
      ],
      "返回值": "[2 4 6 ... 1024]",
      "调用示例": "输入数据(src1Global): [1 2 3 ... 512] 输出数据(dstGlobal):[2 4 6 ... 1024]"
    },
    {
      "API名称": "Round",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0581.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Muls",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0055.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SimpleSoftMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0755.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Lgamma",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0593.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceAny",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10142.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Cosh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0528.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetDataBlockSizeInBytes",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0186.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetUserWorkspace",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0172.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Frac",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0540.html",
      "功能说明": "Frac(-258.41888) = -0.41888428 Frac(5592.625) = 0.625 函数原型接口框架申请临时空间源操作数Tensor全部参与计算1",
      "函数原型": "__aicore__ inline void Frac(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor) 源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Frac(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const uint32_t calCount) 通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Frac(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer) 源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Frac(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[ -0.41888428 0.625  -0.41601562 ...  0.013671875 -0.8251953 ]",
      "调用示例": "2输入数据(srcLocal): [ -258.41888 5592.625 -5312.416 ... 9423.014 -8336.825] 输出数据(dstLocal): [ -0.41888428 0.625 -0.41601562 ... 0.013671875 -0.8251953 ]"
    },
    {
      "API名称": "SetFixPipeAddr",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0256.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Transpose",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0199.html",
      "功能说明": "函数原型普通转置，支持16*16的二维矩阵数据块进行转置1 2template <typename T> __aicore__ inline void Transpose(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal) 增强转置，支持16*16的二维矩阵数据块转置，支持[N,C,H,W]与[N,H,W,C]互相转换1",
      "函数原型": "__aicore__ inline void Transpose(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal) 增强转置，支持16*16的二维矩阵数据块转置，支持[N,C,H,W]与[N,H,W,C]互相转换1 2template <typename T> __aicore__ inline void Transpose(const LocalTensor<T>& dstLocal, const LocalTensor<T> &srcLocal, const LocalTensor<uint8_t> &sharedTmpBuffer, const TransposeParamsExt &transposeParams)",
      "参数说明": [
        {
          "参数名": "普通转置",
          "类型": "",
          "说明": "Atlas 训练系列产品，支持的数据类型为：uint16_t/int16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half"
        },
        {
          "参数名": "增强转置",
          "类型": "",
          "说明": "transposeType为TRANSPOSE_ND2ND_B16：Atlas 推理系列产品AI Core，支持的数据类型为：uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/int32_t/uint32_t/float"
        }
      ],
      "返回值": "[[  0.  16.  32.  48.  64.  80.  96. 112. 128. 144. 160. 176. 192. 208.",
      "调用示例": "template <typename T> __aicore__ inline void Transpose(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal) 增强转置，支持16*16的二维矩阵数据块转置，支持[N,C,H,W]与[N,H,W,C]互相转换1 2template <typename T> __aicore__ inline void Transpose(const LocalTensor<T>& dstLocal, const LocalTensor<T> &srcLocal, const LocalTensor<uint8_t> &sharedTmpBuffer, const TransposeParamsExt &transposeParams)"
    },
    {
      "API名称": "GetSysWorkSpacePtr",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0170.html",
      "功能说明": "获取系统workspace指针。部分高阶API如Matmul需要使用系统workspace，相关接口需要传入系统workspace指针，此时可以通过该接口获取。使用系统workspace时，host侧开发者需要自行申请系统workspace的空间，其预留空间大小可以通过GetLibApiWorkSpaceSize接口获取。具体内容请参考如何使用workspace。 __aicore__ inline __gm__ uint8_t* __gm__ GetSysWorkSpacePtr()",
      "函数原型": "__gm__ GetSysWorkSpacePtr()",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "__aicore__ inline __gm__ uint8_t* __gm__ GetSysWorkSpacePtr() 参数说明 无 约束说明 无 返回值 系统workspace指针。 调用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 ... REGIST_MATMUL_OBJ(&pipe, GetSysWorkSpacePtr()"
    },
    {
      "API名称": "GET_TILING_DATA_MEMBER",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0216.html",
      "功能说明": "函数原型1GET_TILING_DATA_MEMBER(struct_name, mem_name, tiling_data, tiling_arg)",
      "函数原型": "void add_custom(__gm__ uint8_t *x, __gm__ uint8_t *y, __gm__ uint8_t *z, __gm__ uint8_t *tiling)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Brcb",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0089.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetSubBlockNum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0280.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WriteSpmBuffer",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0167.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Concat",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0839.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "FasterGelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0772.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0146",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0146.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "index_sequence",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10106.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GatherMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0071.html",
      "功能说明": "函数原型用户自定义模式1 2template <typename T, typename U, GatherMaskMode mode = defaultGatherMaskMode> __aicore__ inline void GatherMask(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<U>& src1Pattern, const bool reduceMode, const uint32_t mask, const GatherMaskParams& gatherMaskParams, uint64_t& rsvdCnt)",
      "函数原型": "__aicore__ inline void GatherMask(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<U>& src1Pattern, const bool reduceMode, const uint32_t mask, const GatherMaskParams& gatherMaskParams, uint64_t& rsvdCnt) 内置固定模式1 2template <typename T, GatherMaskMode mode = defaultGatherMaskMode> __aicore__ inline void GatherMask(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const uint8_t src1Pattern, const bool reduceMode, const uint32_t mask, const GatherMaskParams& gatherMaskParams, uint64_t& rsvdCnt)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/uint16_t/int16_t/float/uint32_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t/uint16_t/int16_t/float/uint32_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/uint16_t/int16_t/float/uint32_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t/uint16_t/int16_t/float/uint32_t/int32_t"
        },
        {
          "参数名": "内置固定模式",
          "类型": "",
          "说明": "src1Pattern数据类型为uint8_t，取值范围为[1,7]，所有repeat迭代使用相同的gather mask"
        },
        {
          "参数名": "用户自定义模式",
          "类型": "",
          "说明": "src1Pattern数据类型为LocalTensor，迭代间间隔由src1RepeatStride决定， 迭代内src1Pattern连续消耗"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "Normal模式"
        },
        {
          "参数名": "true",
          "类型": "",
          "说明": "Counter模式"
        },
        {
          "参数名": "该模式有以下两种配置方式",
          "类型": "",
          "说明": "配置方式一：每次repeat操作mask个元素，总的数据计算量为repeatTimes * mask个元素"
        },
        {
          "参数名": "配置方式二",
          "类型": "",
          "说明": "总的数据计算量为mask个元素"
        }
      ],
      "返回值": "输出数据(rsvdCnt): 64",
      "调用示例": "输入数据(src0Local): [1 2 3 ... 128] 输入数据(src1Pattern): src1Pattern = 2; 输出数据(dstLocal): [2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 undefine ..undefined] 输出数据(rsvdCnt): 64"
    },
    {
      "API名称": "REGISTER_TILING_DEFAULT",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00003.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Duplicate",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0088.html",
      "功能说明": "将一个变量或立即数复制多次并填充到向量中。 tensor前n个数据计算",
      "函数原型": "__aicore__ inline KernelDuplicate()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/half/int32_t/uint32_t/float/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/half/int32_t/uint32_t/float/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[18.0 18.0 18.0 ... 18.0 undefined ... undefined",
      "调用示例": "输入数据(src0Local): [1.0 2.0 3.0 ... 256.0] 输入数据(src1Local): half scalar = 18.0; 输出数据(dstLocal):"
    },
    {
      "API名称": "Cos",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0508.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetBlockNum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0184.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "CrossCoreWaitFlag",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0274.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Swish",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0783.html",
      "功能说明": "2template <typename T, bool isReuseSource = false> __aicore__ inline void Swish(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, uint32_t dataSize, const T &scalarValue)",
      "函数原型": "__aicore__ inline void Swish(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, uint32_t dataSize, const T &scalarValue)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[ 0.3784   -0.007263 -0.02016   3.78     -0.01666   3.762     0.414",
      "调用示例": "template <typename T, bool isReuseSource = false> __aicore__ inline void Swish(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, uint32_t dataSize, const T &scalarValue)"
    },
    {
      "API名称": "Input",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0946.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetMrgSortResult",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0233.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "BlockReduceMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0083.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0121",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0121.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "AscendQuant",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0818.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetSubBlockIdx",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0281.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "AllocTensor",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0136.html",
      "功能说明": "流水任务之间通过队列（Queue）完成任务间通信和同步。",
      "函数原型": "__aicore__ inline KernelAscendQuant()",
      "参数说明": [
        {
          "参数名": "采用比特位表达信息",
          "类型": "",
          "说明": "bit 0位为1表示，数据格式从ND转换为NZ，TPosition仅支持A1或B1；"
        },
        {
          "参数名": "支持的型号如下",
          "类型": "",
          "说明": "Atlas 推理系列产品"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename dataType> __aicore__ void kernel_ascend_quant_operator(GM_ADDR src_gm, GM_ADDR dst_gm, uint32_t dataSize)"
    },
    {
      "API名称": "GetStoreAtomicConfig",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0287.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Ceil",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0572.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Sort32",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0231.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetTaskRation",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0188.html",
      "功能说明": "函数原型1__aicore__ inline int64_t GetTaskRation()",
      "函数原型": "inline int64_t GetTaskRation()",
      "参数说明": [],
      "返回值": "约束说明无",
      "调用示例": "3 uint64_t ratio = AscendC::GetTaskRation(); AscendC::PRINTF(\"task ratio is %u\", ratio);"
    },
    {
      "API名称": "Atan",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0516.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SoftmaxFlashV2",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0758.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetLoadDataRepeat",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0247.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Xor",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0601.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "And",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0041.html",
      "功能说明": "每对elements按位与运算，公式表达如下： 整个tensor参与计算",
      "函数原型": "inline void And(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[1 0 3 ... 0]",
      "调用示例": "输入数据(src0Local): [1 2 3 ... 512] 输入数据(src1Local): [513 512 511 ... 2] 输出数据(dstLocal): [1 0 3 ... 0]"
    },
    {
      "API名称": "SoftmaxFlash",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0756.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "InitSpmBuffer",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0166.html",
      "功能说明": "初始化SPM Buffer。 SPM Buffer的具体介绍和完整使用样例请参考如何使用SPM Buffer。 暂存到workspace初始化，需要指定GM地址为SPM Buffer：",
      "函数原型": "__aicore__ inline void InitSpmBuffer(const GlobalTensor<T>& workspace, const int32_t bufferSize) 暂存到L1 Buffer初始化，不需要指定地址，会默认暂存到L1 Buffer，只需要传入需要的SPM Buffer大小： 1 __aicore__ inline void InitSpmBuffer(const int32_t bufferSize)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "workspace_gm.SetGlobalBuffer((__gm__ T *)usrWorkspace, len); // 此处的usrWorkspace为用户自定义的workspace"
    },
    {
      "API名称": "DeepNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0808.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetProgramCounter",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0279.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetKernelMode",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1211.html",
      "功能说明": "函数原型1void SetKernelMode(KernelMode mode)",
      "函数原型": "16int32_t main(int32_t argc, char* argv[])",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TransDataTo5HD",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0200.html",
      "功能说明": "数据格式转换，一般用于将NCHW格式转换成NC1HWC0格式。特别的，也可以用于二维矩阵数据块的转置。完成转置功能时，相比于Transpose接口，Transpose仅支持16*16大小的矩阵转置；本接口单次repeat内可处理512Byte的数据（16个datablock），根据数据类型不同，支持不同shape的矩阵转置（比如数据类型为half时，单次repeat可完成16*16大小的矩阵转置），同还可以支持多次repeat操作。 单次repeat内转换规则如下： 当输入数据类型位宽为16位时，每个datablock中包含16个数，指令内部会循环16次，每次循环都会分别从指定的16个datablock中的对应位置取值，组成一个新的datablock单元放入目的地址中。如下图所示，图中的srcLocalList[0]-srcLocalList[15]代表源操作数的16个datablock。 图1 输入数据类型位宽为16位时的转换规则",
      "函数原型": "__aicore__ inline KernelTransDataTo5HD()",
      "参数说明": [
        {
          "参数名": "如下图所示",
          "类型": "",
          "说明": "图3 输入数据类型位宽为8位时的转换规则"
        },
        {
          "参数名": "这里给出其具体的转换方法",
          "类型": "",
          "说明": "NCHW格式转换成NC1HWC0格式时，如果是数据类型的位宽为32位或者16位，则C0=16；如果数据类型的位宽为8位，则C0=32"
        },
        {
          "参数名": "16为例进行介绍",
          "类型": "",
          "说明": "函数原型"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/uint8_t/int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "结构体内包含",
          "类型": "",
          "说明": "读取和写入位置的控制参数，迭代次数，相邻迭代间的地址步长等参数"
        },
        {
          "参数名": "有以下两种取值",
          "类型": "",
          "说明": "True：表示存储于datablock的高半部"
        }
      ],
      "返回值": "[[[[[ 0.  1.  2. ... 13. 14. 15.]",
      "调用示例": "template <typename T> __aicore__ inline void TransDataTo5HD(const LocalTensor<T> (&dstLocalList)[NCHW_CONV_ADDR_LIST_SIZE], const LocalTensor<T> (&srcLocalList)[NCHW_CONV_ADDR_LIST_SIZE], const TransDataTo5HDParams& nchwconvParams) dstList与srcList类型为uint64_t的数组，数组元素对应LocaTensor的地址值，该接口性能更优。开发者可以通过LocalTensor的GetPhyAddr接口获取该地址值。 1 2 3 // NCHW_CONV_ADDR_LIST_SIZE值为16 template<typename T> __aicore__ inline void TransDataTo5HD(uint64_t dstList[NCHW_CONV_ADDR_LIST_SIZE], uint64_t srcList[NCHW_CONV_ADDR_LIST_SIZE], const TransDataTo5HDParams& nchwconvParams) dstLocal与srcLocal类型为uint64_t的LocalTensor，连续存储对应LocalTensor的地址值。开发者可以通过LocalTensor的GetPhyAddr接口获取该地址值。 1 2 template <typename T> __aicore__ inline void TransDataTo5HD(const LocalTensor<uint64_t>& dstLocal, const LocalTensor<uint64_t>& srcLocal, const TransDataTo5HDParams& nchwconvParams)"
    },
    {
      "API名称": "Sqrt",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0029.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetLoadDataBoundary",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0246.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "BatchNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0806.html",
      "功能说明": "对输入特征x，在batch维度上计算均值μ和方差σ： 对于每个特征i，对输入特征x进行归一化： 对归一化后的特征进行缩放和平移： 函数原型接口框架申请临时空间1",
      "函数原型": "__aicore__ inline void BatchNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamm, const LocalTensor<T>& beta, const T epsilon, BatchNormTiling& tiling) 通过sharedTmpBuffer入参传入临时空间1 2template <typename T, bool isReuseSource = false, bool isBasicBlock = false> __aicore__ inline void BatchNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamm, const LocalTensor<T>& beta, const LocalTensor<uint8_t>& sharedTmpBuffer, const T epsilon, BatchNormTiling& tiling)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "基本块要求如下",
          "类型": "",
          "说明": "originB是8的倍数；S*H是64的倍数，但小于2048"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename T, bool isReuseSource = false, bool isBasicBlock = false> __aicore__ inline void BatchNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamm, const LocalTensor<T>& beta, const T epsilon, BatchNormTiling& tiling) 通过sharedTmpBuffer入参传入临时空间1 2template <typename T, bool isReuseSource = false, bool isBasicBlock = false> __aicore__ inline void BatchNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamm, const LocalTensor<T>& beta, const LocalTensor<uint8_t>& sharedTmpBuffer, const T epsilon, BatchNormTiling& tiling)"
    },
    {
      "API名称": "InitConstValue",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0237.html",
      "功能说明": "2template <typename T, typename U = PrimT<T>, typename Std::enable_if<Std::is_same<PrimT<T>, U>::value, bool>::type = true> __aicore__ inline void InitConstValue(const LocalTensor<T> &dstLocal, const InitConstValueParams<U> &initConstValueParams)",
      "函数原型": "__aicore__ inline void InitConstValue(const LocalTensor<T> &dstLocal, const InitConstValueParams<U> &initConstValueParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/uint16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/uint16_t/bfloat16_t/float/int32_t/uint32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/uint16_t/bfloat16_t/float/int32_t/uint32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/int16_t/uint16_t/bfloat16_t/float/int32_t/uint32_t"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "blockNum∈[0, 32767]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "dstGap∈[0, 32767]"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename T, typename U = PrimT<T>, typename Std::enable_if<Std::is_same<PrimT<T>, U>::value, bool>::type = true> __aicore__ inline void InitConstValue(const LocalTensor<T> &dstLocal, const InitConstValueParams<U> &initConstValueParams)"
    },
    {
      "API名称": "Asinh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0560.html",
      "功能说明": "函数原型通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Asinh(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1",
      "函数原型": "__aicore__ inline void Asinh(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Asinh(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer) 接口框架申请临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Asinh(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const uint32_t calCount) 源操作数Tensor全部参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Asinh(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[0.6344272 1.4868407 1.0538127  ...  1.2560008 1.2771227]",
      "调用示例": "2输入数据(srcLocal): [0.80541134 0.08385705 0.49426016 ... 0.30962205 0.28947052] 输出数据(dstLocal): [0.6344272 1.4868407 1.0538127 ... 1.2560008 1.2771227]"
    },
    {
      "API名称": "ReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10018.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WelfordFinalize",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0814.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Erf",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0544.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "conditional",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10118.html",
      "功能说明": "conditional有一个嵌套的type成员，它的值取决于Bp的值：如果Bp为true，则conditional<Bp, If, Then>::type为If。如果Bp为false，则conditional<Bp, If, Then>::type为Then。 2template <bool Bp, typename If, typename Then> struct conditional;",
      "函数原型": "__aicore__ inline static void print()",
      "参数说明": [],
      "返回值": ":type取值如下：",
      "调用示例": "template <bool Condition> __aicore__ inline void selectOtherType()"
    },
    {
      "API名称": "Mins",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0057.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "MmadWithSparse",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0250.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Fmod",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0608.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Digamma",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0597.html",
      "功能说明": "按元素计算x的gamma函数的对数导数，计算公式如下，其中PAR表示矢量计算单元一个迭代能够处理的元素个数，为伽玛函数。 计算公式如下，其中PAR表示矢量计算单元一个迭代能够处理的元素个数： 通过sharedTmpBuffer入参传入临时空间",
      "函数原型": "__aicore__ inline void Digamma(LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t calCount) 接口框架申请临时空间 1 2 template<typename T, bool isReuseSource = false> __aicore__ inline void Digamma(LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const uint32_t calCount)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "true",
          "类型": "",
          "说明": "开发者允许源操作数被改写，可以使能该参数，使能后本接口内部计算时复用srcTensor的内存空间，节省部分内存空间；"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "本接口内部计算时不复用srcTensor的内存空间"
        }
      ],
      "返回值": "[1.5843406 -3.978809 -6.2081366 ... 0.8983184 2.1407988]",
      "调用示例": "输入数据(srcLocal): [5.3675685 0.26528683 -2.872628 ... 2.9387941 9.001339] 输出数据(dstLocal): [1.5843406 -3.978809 -6.2081366 ... 0.8983184 2.1407988]"
    },
    {
      "API名称": "ReGlu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0790.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetAtomicMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0285.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WholeReduceMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0079.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ProposalExtract",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0228.html",
      "功能说明": "2template <typename T> __aicore__ inline void ProposalExtract(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const int32_t repeatTimes, const int32_t modeNumber)",
      "函数原型": "__aicore__ inline KernelVecProposal()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "repeatTimes∈[0,255]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "modeNumber∈[0, 5]，int32_t类型，仅限于以下配置：0 – 从x1抽取1 – 从y1抽取2 – 从x2抽取3 – 从y2抽取4 – 从score抽取5 – 从label抽取"
        }
      ],
      "返回值": "[ 33.3    67.56   68.5   -11.914  25.19  -72.8    11.79  -49.47   49.44",
      "调用示例": "AscendC::ProposalExtract(dstLocal, srcLocal, 2, 4);"
    },
    {
      "API名称": "WelfordUpdate",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0812.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Relu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0032.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Power",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0520.html",
      "功能说明": "函数原型Power(dstTensor, src0Tensor, src1Tensor)通过sharedTmpBuffer入参传入临时空间源操作数Tensor全部/部分参与计算1 2template <typename T, bool isReuseSource = false> __aicore__ inline void Power(const LocalTensor<T>& dstTensor, const LocalTensor<T>& src0Tensor, const LocalTensor<T>& src1Tensor, const LocalTensor<uint8_t>& sharedTmpBuffer, uint32_t calCount) 源操作数Tensor全部参与计算1",
      "函数原型": "__aicore__ inline KernelPower()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int32_t"
        }
      ],
      "返回值": "[0.12657544 756.1846 ... 2.0477564]",
      "调用示例": "3输入数据(srcLocal1): [1.4608411 4.344736 ... 0.46437776] 输入数据(srcLocal2): [-5.4534287 4.5122147 ... -0.9344089] 输出数据(dstLocal): [0.12657544 756.1846 ... 2.0477564] Power(dstTensor, srcTensor1, scalarValue)1Power(dstLocal, srcLocal1, scalarValue) 3输入数据(srcLocal1): [2.263972 2.902264 ... 0.40299487] 输入数据(scalarValue): 1.2260373"
    },
    {
      "API名称": "FusedMulAdd",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0050.html",
      "功能说明": "按元素将src0Local和dstLocal相乘并加上src1Local，最终结果存放入dstLocal。计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void FusedMulAdd(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[ -987.      1075.       914.5    -1282.       398.     -8424.",
      "调用示例": "template <typename T> __aicore__ inline void FusedMulAdd(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, const int32_t& calCount) tensor高维切分计算 mask逐bit模式 1 2 template <typename T, bool isSetMask = true> __aicore__ inline void FusedMulAdd(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams) mask连续模式 1 2 template <typename T, bool isSetMask = true> __aicore__ inline void FusedMulAdd(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask, const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams) 参数说明 表1 模板参数说明 参数名 描述 T 操作数数据类型。 Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件 ，支持的数据类型为：half/float Atlas A3 训练系列产品/Atlas A3 推理系列产品 ，支持的数据类型为：half/float Atlas 推理系列产品 AI Core，支持的数据类型为：half/float Atlas 200I/500 A2 推理产品 ，支持的数据类型为：half/float isSetMask 是否在接口内部设置mask。 true，表示在接口内部设置mask。 false，表示在接口外部设置mask，开发者需要使用SetVectorMask接口设置mask值。这种模式下，本接口入参中的mask值必须设置为占位符MASK_PLACEHOLDER。 表2 参数说明 参数名 输入/输出 描述 dstLocal 输入/输出 目的操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 src0Local、src1Local 输入 源操作数。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 LocalTensor的起始地址需要32字节对齐。 两个源操作数的数据类型需要与目的操作数保持一致。 calCount 输入 参与计算的元素个数。 mask[]/mask 输入 mask用于控制每次迭代内参与计算的元素。 逐bit模式：可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与。 mask为数组形式，数组长度和数组元素的取值范围和操作数的数据类型有关。当操作数为16位时，数组长度为2，mask[0]、mask[1]∈[0, 264-1]并且不同时为0；当操作数为32位时，数组长度为1，mask[0]∈(0, 264-1]；当操作数为64位时，数组长度为1，mask[0]∈(0, 232-1]。 例如，mask=[8, 0]，8=0b1000，表示仅第4个元素参与计算。 连续模式：表示前面连续的多少个元素参与计算。取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为16位时，mask∈[1, 128]；当操作数为32位时，mask∈[1, 64]；当操作数为64位时，mask∈[1, 32]。 repeatTimes 输入 重复迭代次数。矢量计算单元，每次读取连续的256Bytes数据进行计算，为完成对输入数据的处理，必须通过多次迭代（repeat）才能完成所有数据的读取与计算。repeatTimes表示迭代的次数。 关于该参数的具体描述请参考如何使用Tensor高维切分计算API。 repeatParams 输入 控制操作数地址步长的参数。BinaryRepeatParams类型，包含操作数相邻迭代间相同datablock的地址步长，操作数同一迭代内不同datablock的地址步长等参数。 相邻迭代间的地址步长参数说明请参考repeatStride；同一迭代内DataBlock的地址步长参数说明请参考dataBlockStride。 返回值 无 约束说明 使用高维切分计算接口时，节省地址空间，开发者可以定义一个Tensor，供源操作数与目的操作数同时使用（即地址重叠），相关约束如下： 单次迭代内，要求源操作数和目的操作数之间100%重叠，不支持部分重叠。 多次迭代间，第N次目的操作数是第N+1次源操作数的情况下，是不支持地址重叠的，因为第N+1次依赖第N次的结果。 操作数地址偏移对齐要求请参见通用约束。 调用示例 本样例中只展示Compute流程中的部分代码。如果您需要运行样例代码，请将该代码段拷贝并替换双目指令样例模板更多样例中的Compute函数即可。 高维切分计算接口样例-mask连续模式（half类型输入） 1 2 3 4 5 uint64_t mask = 128; // repeatTimes = 2, 一次迭代计算128个数, 共计算256个数 // dstBlkStride, src0BlkStride, src1BlkStride = 1, 单次迭代内数据连续读取和写入 // dstRepStride, src0RepStride, src1RepStride = 8, 相邻迭代间数据连续读取和写入 AscendC::FusedMulAdd(dstLocal, src0Local, src1Local, mask, 2, { 1, 1, 1, 8, 8, 8 })"
    },
    {
      "API名称": "SetStoreAtomicConfig",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0286.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Rsqrt",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0030.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "is_base_of",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10115.html",
      "功能说明": "2template <typename Base, typename Derived> struct is_base_of;",
      "函数原型": "of Derived (virtual inheritance)",
      "参数说明": [],
      "返回值": ":value取值如下：",
      "调用示例": ""
    },
    {
      "API名称": "Sigmoid",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0793.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetHF32TransMode",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0259.html",
      "功能说明": "函数原型1__aicore__ inline void SetHF32TransMode(bool hf32TransMode)",
      "函数原型": "__aicore__ inline void SetHF32TransMode(bool hf32TransMode)",
      "参数说明": [
        {
          "参数名": "支持如下两种取值",
          "类型": "",
          "说明": "true：则FP32将以向零靠近的方式四舍五入为HF32"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "则FP32将以最接近偶数的方式四舍五入为HF32"
        }
      ],
      "返回值": "无",
      "调用示例": "AscendC::SetHF32TransMode(hf32TransMode); 父主题： 矩阵计算(ISASI)"
    },
    {
      "API名称": "SetCmpMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0224.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "BEGIN_TILING_DATA_DEF",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1005.html",
      "功能说明": "set_{field_name}接口：用于设置TilingData类的字段值，field_name为定义TilingData类时添加的字段名。SaveToBuffer接口：完成TilingData的序列化和保存。GetDataSize接口：获取TilingData的长度。CheckAlignAndGenPlaceHolder：该接口是内部关联接口，用于框架侧检查Tiling结构体中成员变量是否满足字节对齐要求，并对不对齐的变量进行补齐，开发者无需关注。SetDataPtr接口：该接口为预留接口，开发者无需关注。 函数原型定义一个TilingData类1BEGIN_TILING_DATA_DEF(class_name) 添加通用数据类型的TilingData字段1TILING_DATA_FIELD_DEF(data_type, field_name) 添加数组类型的TilingData字段，数组的元素数据类型为通用数据类型1TILING_DATA_FIELD_DEF_ARR(arr_type, arr_size, field_name)",
      "函数原型": "注册算子tilingdata类到对应的AddCustom算子 REGISTER_TILING_DATA_CLASS(AddCustom, AddCustomTilingData)",
      "参数说明": [
        {
          "参数名": "提供以下接口",
          "类型": "",
          "说明": "set_{field_name}接口：用于设置TilingData类的字段值，field_name为定义TilingData类时添加的字段名"
        },
        {
          "参数名": "SaveToBuffer接口",
          "类型": "",
          "说明": "完成TilingData的序列化和保存"
        },
        {
          "参数名": "GetDataSize接口",
          "类型": "",
          "说明": "获取TilingData的长度"
        },
        {
          "参数名": "CheckAlignAndGenPlaceHolder",
          "类型": "",
          "说明": "该接口是内部关联接口，用于框架侧检查Tiling结构体中成员变量是否满足字节对齐要求，并对不对齐的变量进行补齐，开发者无需关注"
        },
        {
          "参数名": "SetDataPtr接口",
          "类型": "",
          "说明": "该接口为预留接口，开发者无需关注"
        }
      ],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ShiftLeft",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0058.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Broadcast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0853.html",
      "功能说明": "比如A的shape为(2,1)，广播的目标shape为(2,16)，则会将原来的一列扩展为相同的16列。",
      "函数原型": "__aicore__ inline void Broadcast(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, const uint32_t dstShape[dim], const uint32_t srcShape[dim], LocalTensor<uint8_t> &sharedTmpBuffer) 接口框架申请临时空间1 2template <typename T, int32_t dim, int32_t axis, bool isReuseSource = false> __aicore__ inline void Broadcast(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, const uint32_t dstShape[dim], const uint32_t srcShape[dim])",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/half/float"
        },
        {
          "参数名": "输出tensor的shape",
          "类型": "",
          "说明": "uint32_t类型的数组，长度为1或者2， 输入/输出的shape维度数目必须一致"
        },
        {
          "参数名": "输入tensor的shape",
          "类型": "",
          "说明": "uint32_t类型的数组，长度为1或者2， 输入/输出的shape维度数目必须一致"
        }
      ],
      "返回值": "[[ 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1]",
      "调用示例": "template <typename T, int32_t dim, int32_t axis, bool isReuseSource = false> __aicore__ inline void Broadcast(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, const uint32_t dstShape[dim], const uint32_t srcShape[dim], LocalTensor<uint8_t> &sharedTmpBuffer) 接口框架申请临时空间1 2template <typename T, int32_t dim, int32_t axis, bool isReuseSource = false> __aicore__ inline void Broadcast(const LocalTensor<T> &dstLocal, const LocalTensor<T> &srcLocal, const uint32_t dstShape[dim], const uint32_t srcShape[dim])"
    },
    {
      "API名称": "WaitFlag",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0270.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ToBfloat16",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0021.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "RepeatReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0086.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SyncAll",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0204.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DataCachePreload",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0176.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetSystemCycle",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0282.html",
      "功能说明": "time = (cycle数/50) us 。 函数原型1__aicore__ inline int64_t GetSystemCycle()",
      "函数原型": "inline void InitTilingParam(int32_t& totalSize, int32_t& loopSize)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "8PipeBarrier<PIPE_ALL>(); int64_t systemCycleBefore = AscendC::GetSystemCycle(); // 调用Add指令前的cycle数 AscendC::Add(dstLocal, src0Local, src1Local, 512);"
    },
    {
      "API名称": "Atanh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0556.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetSysWorkSpace",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0171.html",
      "功能说明": "框架需要使用的workspace称之为系统workspace。Matmul等高阶API需要系统workspace，所以在使用该类API时，需要调用该接口，设置系统workspace的指针。采用工程化算子开发方式或者kernel直调方式（开启-DHAVE_WORKSPACE编译选项）时，不需要开发者手动设置，框架会自动设置。其他场景下，需要开发者调用SetSysWorkSpace进行设置。 在kernel侧调用该接口前，需要在host侧调用GetLibApiWorkSpaceSize获取系统workspace的大小，并在host侧设置workspacesize大小。样例如下：",
      "函数原型": "template<typename aType, typename bType, typename cType, typename biasType> __aicore__ inline void MatmulLeakyKernel<aType, bType, cType, biasType>::Init( GM_ADDR a, GM_ADDR b, GM_ADDR bias, GM_ADDR c, GM_ADDR workspace, const TCubeTiling& tiling, float alpha)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "__aicore__ inline void SetSysWorkSpace(GM_ADDR workspace) 参数说明 表1 接口参数说明 参数名称 输入/输出 描述 workspace 输入 核函数传入的workspace的指针，包括系统workspace和用户使用的workspace。 约束说明 无 返回值 无 调用示例 1 2 3 4 5 6 7 8 9 10 11 template<typename aType, typename bType, typename cType, typename biasType> __aicore__ inline void MatmulLeakyKernel<aType, bType, cType, biasType>::Init( GM_ADDR a, GM_ADDR b, GM_ADDR bias, GM_ADDR c, GM_ADDR workspace, const TCubeTiling& tiling, float alpha)"
    },
    {
      "API名称": "API_0893",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0893.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DumpTensor",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0192.html",
      "功能说明": "基于算子工程开发的算子，可以使用该接口Dump指定Tensor的内容。同时支持打印自定义的附加信息（仅支持uint32_t数据类型的信息），比如打印当前行号等。 在算子kernel侧实现代码中需要打印Tensor数据的地方调用DumpTensor接口打印相关内容。样例如下： AscendC::DumpTensor(srcLocal,5, dataLen);",
      "函数原型": "inline void DumpTensor(const GlobalTensor<T>& tensor, uint32_t desc, uint32_t dumpSize, const ShapeInfo& shapeInfo)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "AscendC::DumpTensor(srcLocal,5, dataLen); uint32_t array[] = {static_cast<uint32_t>(8),static_cast<uint32_t>(8)}; AscendC::ShapeInfo shapeInfo(2, array); // dim为2， shape为(8,8)"
    },
    {
      "API名称": "Maxs",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0056.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetFixpipePreQuantFlag",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0254.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "FasterGeluV2",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0773.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "barA",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0301.html",
      "功能说明": "当同一个CubeResGroupHandle中的两个AIV任务之间存在依赖关系时，可以使用GroupBarrier控制同步。",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "tuple",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10108.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LogSoftMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0768.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Mean",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0829.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Unknown",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/appdevgapi/aclcppdevg_03_0020.html",
      "功能说明": "设备同步：例如aclrtSynchronizeDevice阻塞当前主机线程直到Device上所有显式或隐式创建的Stream都完成所有先前下发的任务。",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "is_same",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10116.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0160",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0160.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_1007",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1007.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Normalize",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0810.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LayerNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0797.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceXorSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0833.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Unknown",
      "API文档URL": "https://www.hiascend.com/developer/operator",
      "功能说明": "华为计算微信公众号昇腾AI开发者公众号华为计算微博华为计算今日头条昇腾社区首页中文注册登录开发者主页开发开发场景推理开发 算子开发 开发资源资源下载中心 固件与驱动 昇腾镜像仓库 兼容性查询助手 ModelZoo 昇腾开放资源 专区开发板专区 HOTDeepseek专区 文档活动活动 昇腾AI开发者创享日·广东站 HOT鲲鹏昇腾开发者大会2025 昇腾AI开发者创享日 昇腾学堂·活动广场 昇腾AI训练营-CANN训练营 大赛昇腾AI创新大赛2025 昇腾AI创新大赛-算子挑战赛 HOT直播 学习学习主页 学习路径 在线课程 在线实验 认证 论坛博客昇腾博客 NEW技术干货 开发者计划昇腾开发者计划2025 昇腾众智计划 昇腾荣誉顾问 昇腾MVP 昇腾HAE 鲲鹏昇腾原生创新汇  下载支持算子开发算子开发是针对神经网络基础单元（即算子）的设计与实现过程，其目的是让开发者提出的创新算法能够在昇腾AI处理器上高效运行。",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "enable_if",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10117.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LayerNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0796.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0218",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0218.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ICachePreLoad",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0276.html",
      "功能说明": "函数原型1__aicore__ inline void ICachePreLoad(const int64_t preFetchLen)",
      "函数原型": "__aicore__ inline void ICachePreLoad(const int64_t preFetchLen)",
      "参数说明": [
        {
          "参数名": "异构组件",
          "类型": "",
          "说明": "preFetchLen参数单位为2K Byte, 取值应小于ICache的大小/2K"
        },
        {
          "参数名": "推理系列产品",
          "类型": "",
          "说明": "preFetchLen参数单位为2K Byte, 取值应小于ICache的大小/2K"
        },
        {
          "参数名": "Core",
          "类型": "",
          "说明": "传入该参数无效，预取长度均为128Byte"
        }
      ],
      "返回值": "无",
      "调用示例": "AscendC::ICachePreLoad(preFetchLen);"
    },
    {
      "API名称": "AscendDequant",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0820.html",
      "功能说明": "按元素做反量化计算，比如将int32_t数据类型反量化为half/float等数据类型。本接口最多支持输入为二维数据，不支持更高维度的输入。 假设输入srcTensor的shape为（m, n），每行数据（即n个输入数据）所占字节数要求32字节对齐，每行中进行反量化的元素个数为calCount； 反量化系数deqScale可以为标量或者向量，为向量的情况下，calCount <= deqScale的元素个数，只有前CalCount个反量化系数生效； 输出dstTensor的shape为（m, n_dst）， n * sizeof(dstT)不满足32字节对齐时，需要向上补齐为32字节，n_dst为向上补齐后的列数。",
      "函数原型": "inline void AscendDequant(const LocalTensor<dstT>& dstTensor, const LocalTensor<int32_t>& srcTensor, const LocalTensor<scaleT>& deqScale, const LocalTensor<uint8_t>& sharedTmpBuffer, const uint32_t calCount)",
      "参数说明": [],
      "返回值": "93.9021        21.530592   153.47137    -0.          0.          448.23096    -455.7807   0.",
      "调用示例": "如下图示例中，srcTensor的数据类型为int32_t，m = 4，n = 8，calCount = 4，表明srcTensor中每行进行反量化的元素个数为4，deqScale中的前4个数生效，后12个数不参与反量化计算；dstTensor的数据类型为bfloat16_t，m = 4，n_dst = 16 (16 * sizeof(bfloat16_t) % 32 = 0)。计算逻辑是srcTensor的每n个数为一行，对于每行中的前calCount个元素，该行srcTensor的第i个元素与deqScale的第i个元素进行相乘写入dstTensor对应行的第i个元素，dstTensor对应行的第calCount + 1个元素~第n_dst个元素均为不确定的值。 如下示例中，srcTensor的数据类型为int32_t，m = 4，n = 8， calCount = 4，表明srcTensor中每行进行反量化的元素个数为4；dstTensor的数据类型为float，m = 4，n_dst = 8 (8 * sizeof(float) % 32 = 0)。对于srcTensor每行中的前4个元素都和标量deqScale相乘并写入dstTensor中每行的对应位置。 calCount为 32 / sizeof(dstT)的倍数"
    },
    {
      "API名称": "REGISTER_TILING_FOR_TILINGKEY",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00004.html",
      "功能说明": "函数原型1REGISTER_TILING_FOR_TILINGKEY(EXPRESSION, TILING_STRUCT)",
      "函数原型": "注册用户默认自定义TilingData结构体 REGISTER_TILING_FOR_TILINGKEY(\"TILING_KEY_VAR == 1\", optiling::TilingDataA);",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TILING_KEY_IS",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0217.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WaitPreTaskEnd",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00088.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "x",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0235.html",
      "功能说明": "给定一个连续的输入张量和一个目的地址偏移张量，Scatter指令根据偏移地址生成新的结果张量后将输入张量分散到结果张量中。 将源操作数src中的元素按照指定的位置（由dst_offset和base_addr共同作用）分散到目的操作数dst中。 tensor前n个数据计算",
      "函数原型": "__aicore__ inline void Init(__gm__ uint8_t* dstGm, __gm__ uint8_t* srcGm, __gm__ uint8_t* dstOffsetGm, const uint32_t count)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/uint32_t/float/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half/uint32_t/int32_t/float"
        },
        {
          "参数名": "地址偏移的取值范围如下",
          "类型": "",
          "说明": "当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "数据范围",
          "类型": "",
          "说明": "repeatTimes∈[0,255]"
        },
        {
          "参数名": "针对以下型号",
          "类型": "",
          "说明": "Atlas 200I/500 A2 推理产品"
        }
      ],
      "返回值": "当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可。超出取值范围可能导致非预期输出。",
      "调用示例": "template <typename T> __aicore__ inline void Scatter(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& dstOffsetLocal, const uint32_t dstBaseAddr, const uint32_t count) tensor高维切分计算 mask逐bit模式 1 2 template <typename T> __aicore__ inline void Scatter(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& dstOffsetLocal, const uint32_t dstBaseAddr, const uint64_t mask[], const uint8_t repeatTimes, const uint8_t srcRepStride) mask连续模式 1 2 template <typename T> __aicore__ inline void Scatter(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LocalTensor<uint32_t>& dstOffsetLocal, const uint32_t dstBaseAddr, const uint64_t mask, const uint8_t repeatTimes, const uint8_t srcRepStride) 参数说明 表1 模板参数说明 参数名 描述 T 操作数数据类型。 Atlas 推理系列产品 AI Core，支持的数据类型为：uint16_t/uint32_t/float/half Atlas 200I/500 A2 推理产品 ，支持的数据类型为：uint8_t/int8_t/uint16_t/int16_t/half/uint32_t/int32_t/float 表2 参数说明 参数名称 输入/输出 含义 dstLocal 输出 目的操作数，类型为LocalTensor。LocalTensor的起始地址需要32字节对齐。 srcLocal 输入 源操作数，类型为LocalTensor。数据类型需与dstLocal保持一致。 dstOffsetLocal 输入 用于存储源操作数的每个元素在dstLocal中对应的地址偏移。偏移基于dstLocal的基地址dstBaseAddr计算，以字节为单位，取值应保证按dstLocal数据类型位宽对齐，否则会导致非预期行为。 针对以下型号，地址偏移的取值范围不超出uint32_t的范围即可。 Atlas 推理系列产品 AI Core 针对以下型号，地址偏移的取值范围如下：当操作数为8位时，取值范围为[0, 216-1]；当操作数为16位时，取值范围为[0, 217-1]，当操作数为32位或者64位时，不超过uint32_t的范围即可。超出取值范围可能导致非预期输出。 Atlas 200I/500 A2 推理产品 dstBaseAddr 输入 dstLocal的起始偏移地址，单位是字节。取值应保证按dstLocal数据类型位宽对齐，否则会导致非预期行为。 count 输入 执行处理的数据个数。 mask/mask[] 输入 mask用于控制每次迭代内参与计算的元素。 连续模式：表示前面连续的多少个元素参与计算。取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为8位或16位时，mask∈[1, 128]；当操作数为32位时，mask∈[1, 64]；当操作数为64位时，mask∈[1, 32]。 逐bit模式：可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与。参数类型为长度为2的uint64_t类型数组。 例如，mask=[8, 0]，8=0b1000，表示仅第4个元素参与计算。 参数取值范围和操作数的数据类型有关，数据类型不同，每次迭代内能够处理的元素个数最大值不同。当操作数为8位或16位时，mask[0]、mask[1]∈[0, 264-1]并且不同时为0；当操作数为32位时，mask[1]为0，mask[0]∈(0, 264-1]；当操作数为64位时，mask[1]为0，mask[0]∈(0, 232-1]。 repeatTimes 输入 指令迭代次数，每次迭代完成8个datablock的数据收集，数据范围：repeatTimes∈[0,255]。 特别地，针对以下型号： Atlas 200I/500 A2 推理产品 操作数为8位时，每次迭代完成4个datablock（32Bytes）的数据收集。 srcRepStride 输入 相邻迭代间的地址步长，单位是datablock。 约束说明 操作数地址偏移对齐要求请参见通用约束。 为了节省地址空间，开发者可以定义一个Tensor，供源操作数与目的操作数同时使用（即地址重叠），相关约束如下 对于单次repeat（repeatTimes=1），支持源操作数与目的操作数之间要求100%完全重叠，不支持部分重叠。 对于多次repeat（repeatTimes>1），不支持源操作数与目的操作数在迭代间存在依赖。例如当第N次迭代的目的操作数是第N+1次的源操作数时，不支持地址重叠 dstOffsetLocal中的偏移地址不能有相同值，如果存在2个或者多个偏移重复的情况，行为是不可预期的。 调用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 #include \"kernel_operator.h\" template <typename T> class ScatterTest { public: __aicore__ inline ScatterTest()"
    },
    {
      "API名称": "Log",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0512.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ScalarCountLeadingZero",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0017.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "MetricsProfStop",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1215.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "IBWait",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0203.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Floor",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0568.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DumpAccChkPoint",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0195.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0918",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0918.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "DataSyncBarrier",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0272.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "WholeReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0081.html",
      "功能说明": "每个迭代内所有数据求和。归约指令的总体介绍请参考如何使用归约指令。",
      "函数原型": "__aicore__ inline KernelReduce()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "支持数据类型half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "[128. 128. 128. 128. 128. 128. 128. 128. 128. 128. 128. 128. 128. 128.",
      "调用示例": "AscendC::WholeReduceSum<half>(dstLocal, srcLocal, 128, 4, 1, 1, 8);"
    },
    {
      "API名称": "Trunc",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0536.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Cast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0073.html",
      "功能说明": "根据源操作数和目的操作数Tensor的数据类型进行精度转换。 在了解精度转换规则之前，需要先了解浮点数的表示方式和二进制的舍入规则： half共16bit，包括1bit符号位（S），5bit指数位（E）和10bit尾数位（M）。",
      "函数原型": "__aicore__ inline void Cast(const LocalTensor<T1>& dstLocal, const LocalTensor<T2>& srcLocal, const RoundMode& round_mode, const uint32_t calCount) tensor高维切分计算 mask逐bit模式 1 2 template <typename T1, typename T2, bool isSetMask = true> __aicore__ inline void Cast(const LocalTensor<T1>& dstLocal, const LocalTensor<T2>& srcLocal, const RoundMode& round_mode, const uint64_t mask[], const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams) mask连续模式 1 2 template <typename T1, typename T2, bool isSetMask = true> __aicore__ inline void Cast(const LocalTensor<T1>& dstLocal, const LocalTensor<T2>& srcLocal, const RoundMode& round_mode, const uint64_t mask, const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams)",
      "参数说明": [],
      "返回值": "输入1.5 - 2-10，输出1.5 - 2-10。",
      "调用示例": "示例：输入0.5+ 2-9 + 2-11 ，写成float的表示形式：2-1 * (1 + 2-8 + 2-10)，因此E = -1 + 127 = 126，M = 2-8 + 2-10 。"
    },
    {
      "API名称": "SetAtomicMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0284.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0613",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0613.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "AddReluCast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0044.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "x",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0255.html",
      "功能说明": "ClipRelu计算公式为min(clipReluMaxVal，srcData)，clipReluMaxVal为通过该接口设置的最大值，srcData为源数据。 函数原型1__aicore__ inline void SetFixPipeClipRelu(uint64_t config)",
      "函数原型": "__aicore__ inline void SetFixPipeClipRelu(uint64_t config)",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "SetFixPipeClipRelu(clipReluMaxVal);"
    },
    {
      "API名称": "Axpy",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0063.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TransData",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10181.html",
      "功能说明": "本接口支持的数据格式转换场景包括以下四种，除维度顺序变换外，其中涉及到C轴和N轴的拆分，具体转换方式为，C轴拆分为C1轴、C0轴，N轴拆分为N1轴、N0轴。对于位宽为16的数据类型的数据，C0和N0固定为16，C1和N1的计算公式如下。 场景1：NCDHW -> NDC1HWC0输入Tensor {shape:[N, C, D, H, W]}，输出Tensor {shape:[N, D, C/16, H, W, 16]}。请注意，C0实际上等于16，为便于展示，下图中C0被设定为2。 图1 NCDHW格式转为NDC1HWC0格式示意图 场景2：NDC1HWC0 -> NCDHW输入Tensor {shape:[N, D, C/16, H, W, 16]}，输出Tensor {shape:[N, C, D, H, W]}。请注意，C0实际上等于16，为便于展示，下图中C0被设定为2。",
      "函数原型": "__aicore__ inline void TransData(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const LocalTensor<uint8_t>& sharedTmpBuffer, const TransDataParams<U, S>& params) 接口框架申请临时空间1 2template <const TransDataConfig& config, typename T, typename U, typename S> __aicore__ inline void TransData(const LocalTensor<T>& dstTensor, const LocalTensor<T>& srcTensor, const TransDataParams<U, S>& params)",
      "参数说明": [
        {
          "参数名": "当前支持的转换场景有如下四种",
          "类型": "",
          "说明": "NCDHW -> NDC1HWC0、NDC1HWC0 -> NCDHW、NCDHW -> FRACTAL_Z_3D、FRACTAL_Z_3D -> NCDHW"
        },
        {
          "参数名": "DataFormat",
          "类型": "",
          "说明": "uint8_t {"
        }
      ],
      "返回值": "图1 NCDHW格式转为NDC1HWC0格式示意图",
      "调用示例": "3AscendC::Layout ncdhwLayout = AscendC::MakeLayout(AscendC::MakeShape(n, c, d, h, w), AscendC::MakeStride()); AscendC::Layout fractalzLayout = AscendC::MakeLayout(AscendC::MakeShape(d, c1, h, w, n1, n0, c0), AscendC::MakeStride()); AscendC::TransDataParams<decltype(ncdhwLayout), decltype(fractalzLayout)> params = {ncdhwLayout, fractalzLayout};"
    },
    {
      "API名称": "InitDetermineComputeWorkspace",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0206.html",
      "功能说明": "函数原型1__aicore__ inline void InitDetermineComputeWorkspace(GlobalTensor<int32_t>& gmWorkspace, LocalTensor<int32_t>& ubWorkspace)",
      "函数原型": "__aicore__ inline void InitDetermineComputeWorkspace(GlobalTensor<int32_t>& gmWorkspace, LocalTensor<int32_t>& ubWorkspace)",
      "参数说明": [],
      "返回值": "[8,8,8,8,8,...,8] // 256个8",
      "调用示例": "__aicore__ inline void Init(GM_ADDR dstGm, GM_ADDR srcGm, GM_ADDR gmWorkspace, const DetermineComputeSyncTilingData& tiling_data)"
    },
    {
      "API名称": "ArithProgression",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0856.html",
      "功能说明": "实现原理以float类型，ND格式，firstValue和diffValue输入Scalar为例，描述ArithProgression高阶API内部算法框图，如下图所示。 图1 ArithProgression算法框图 计算过程分为如下几步，均在Vector上进行： 等差数列长度8以内步骤：按照firstValue和diffValue的值，使用SetValue实现等差数列扩充，扩充长度最大为8，如果等差数列长度小于8，算法结束；等差数列长度8至64的步骤：对第一步中的等差数列结果使用Adds进行扩充，最大循环7次扩充至64，如果等差数列长度小于64，算法结束；等差数列长度64以上的步骤：对第二步中的等差数列结果使用Adds进行扩充，不断循环直至达到等差数列长度为止。",
      "函数原型": "inline void ArithProgression(const LocalTensor<T> &dstLocal, const T firstValue, const T diffValue, const int32_t count)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int16_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int16_t/int32_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float/int16_t/int32_t"
        }
      ],
      "返回值": "无",
      "调用示例": "3AscendC::LocalTensor<T> dstLocal = outDst.AllocTensor<T>(); AscendC::ArithProgression<T>(dstLocal, static_cast<T>(firstValue_), static_cast<T>(diffValue_), count_); outDst.EnQue<T>(dstLocal);"
    },
    {
      "API名称": "SetAtomicAdd",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0210.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Abs",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0027.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "RpSort16",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0229.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "NotifyNextBlock",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0208.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceProd",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10150.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "UnPad",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0851.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Copy",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0106.html",
      "功能说明": "VECIN，VECCALC，VECOUT之间的搬运指令，支持mask操作和DataBlock间隔操作。 tensor高维切分计算",
      "函数原型": "__aicore__ inline KernelCopy()",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[9 -2 8 ... 9]",
      "调用示例": "输入数据(srcLocal): [9 -2 8 ... 9] 输出数据(dstLocal):"
    },
    {
      "API名称": "AddDeqRelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0045.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "BilinearInterpolation",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0222.html",
      "功能说明": "功能分为水平迭代和垂直迭代。每个水平迭代顺序地从src0Offset读取8个偏移值，表示src0的偏移，每个偏移值指向src0的一个DataBlock的起始地址，如果repeatMode=false，从src1中取一个值，与src0中8个DataBlock中每个值进行乘操作；如果repeatMode=true，从src1中取8个值，按顺序与src0中8个DataBlock中的值进行乘操作，最后当前迭代的dst结果与前一个dst结果按DataBlock进行累加，存入目的地址，在同一个水平迭代内dst地址不变。然后进行垂直迭代，垂直迭代的dst起始地址为上一轮垂直迭代的dst起始地址加上vROffset，本轮垂直迭代占用dst空间为dst起始地址之后的8个DataBlock，每轮垂直迭代进行hRepeat次水平迭代。 mask逐bit模式：",
      "函数原型": "inline void BilinearInterpolation(const LocalTensor<T> &dstLocal, const LocalTensor<T> &src0Local, const LocalTensor<uint32_t> &src0OffsetLocal, const LocalTensor<T> &src1Local, uint64_t mask[], uint8_t hRepeat, bool repeatMode, uint16_t dstBlkStride, uint16_t vROffset, uint8_t vRepeat, const LocalTensor<uint8_t> &sharedTmpBuffer)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        },
        {
          "参数名": "迭代模式",
          "类型": "",
          "说明": "false：每次迭代src0读取的8个datablock中每个值均与src1的单个数值相乘"
        },
        {
          "参数名": "true",
          "类型": "",
          "说明": "每次迭代src0的每个datablock分别与src1的1个数值相乘，共消耗8个block和8个elements"
        }
      ],
      "返回值": "[389, 394, 399, 404, ...,4096]",
      "调用示例": "输入数据(src0Local,half): [1,2,3,...,512] 输入数据(src1Local,half): [2,3,4,...,17] 输入数据(src0OffsetLocal,uint32_t): [0,32,64,...,992] 输出数据(dstLocal,half): [389, 394, 399, 404, ...,4096]"
    },
    {
      "API名称": "max",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10053.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Select",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0070.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "CastDeq",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0074.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Conv2D",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0262.html",
      "功能说明": "计算给定输入张量和权重张量的2-D卷积，输出结果张量。Conv2d卷积层多用于图像识别，使用过滤器提取图像中的特征。 2template <typename dst_T, typename src_T> __aicore__ inline void Conv2D(const LocalTensor<dst_T>& dstLocal, const LocalTensor<src_T>& featureMap, const LocalTensor<src_T>& weight, Conv2dParams& conv2dParams, Conv2dTilling& tilling)",
      "函数原型": "inline void Conv2D(const LocalTensor<dst_T>& dstLocal, const LocalTensor<src_T>& featureMap, const LocalTensor<src_T>& weight, Conv2dParams& conv2dParams, Conv2dTilling& tilling)",
      "参数说明": [
        {
          "参数名": "支持的TPosition为",
          "类型": "",
          "说明": "CO1，CO2"
        },
        {
          "参数名": "支持的TPosition为",
          "类型": "",
          "说明": "CO1，CO2"
        },
        {
          "参数名": "要求如下",
          "类型": "",
          "说明": "当feature_map的数据类型为half时，C0=16"
        },
        {
          "参数名": "C1取值范围",
          "类型": "",
          "说明": "[1,4], 输入的channel的范围：[16，32，64，128]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "[1,40]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "[1,40]"
        },
        {
          "参数名": "对于C0要求如下",
          "类型": "",
          "说明": "当feature_map的数据类型为half时，C0=16"
        },
        {
          "参数名": "C1取值范围",
          "类型": "",
          "说明": "[1,4]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "[16，32，64，128]， Cout必须为16的倍数"
        },
        {
          "参数名": "值的范围",
          "类型": "",
          "说明": "[1,5]"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename dst_T, typename src_T> __aicore__ inline void Conv2D(const LocalTensor<dst_T>& dstLocal, const LocalTensor<src_T>& featureMap, const LocalTensor<src_T>& weight, Conv2dParams& conv2dParams, Conv2dTilling& tilling) 入参中的tiling结构需要通过如下切分方案计算接口来获取：1 2template <typename T> __aicore__ inline Conv2dTilling GetConv2dTiling(Conv2dParams& conv2dParams) 参数说明 表1 接口参数说明参数名称 类型 说明 dstLocal 输出 目的操作数。 Atlas 训练系列产品，支持的TPosition为：CO1，CO2 Atlas 推理系列产品AI Core，支持的TPosition为：CO1，CO2 结果中有效张量格式为[Cout/16, Ho, Wo, 16]，大小为Cout * Ho * Wo，Ho与Wo可以根据其他数据计算得出。 Ho = floor((H + pad_top + pad_bottom - dilation_h * (Kh - 1) - 1) / stride_h + 1) Wo = floor((W + pad_left + pad_right - dilation_w * (Kw - 1) - 1) / stride_w + 1) 由于硬件要求Ho*Wo需为16倍数，在申请dst Tensor时，shape应向上16对齐，实际申请shape大小应为Cout * round_howo。 round_howo = ceil(Ho * Wo /16)"
    },
    {
      "API名称": "LoadDataUnzip",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0243.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Gemm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0263.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ScalarGetCountOfValue",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0016.html",
      "功能说明": "2template <int countValue> __aicore__ inline int64_t ScalarGetCountOfValue(uint64_t valueIn)",
      "函数原型": "__aicore__ inline int64_t ScalarGetCountOfValue(uint64_t valueIn)",
      "参数说明": [],
      "返回值": "16",
      "调用示例": "// 输出数据(oneCount): 16 int64_t oneCount = AscendC::ScalarGetCountOfValue<1>(valueIn);"
    },
    {
      "API名称": "GroupNorm",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0816.html",
      "功能说明": "其中，i表示特征中的索引， 和  表示特征中每个值标准化前后的值，μ和σ表示特征的均值和标准差，计算公式如下所示： 其中，ε是一个很小的常数，S表示参与计算的数据的集合，m表示集合的大小。不同类型的特征标准化方法（BatchNorm、LayerNorm、InstanceNorm、GroupNorm等）的主要区别在于参与计算的数据集合的选取上。不同Norm类算子参与计算的数据集合的选取方式如下： 对于一个shape为[N, C, H, W]的输入，GroupNorm将每个[C, H, W]在C维度上分为groupNum组，然后对每一组进行标准化。最后对标准化后的特征进行缩放和平移。其中缩放参数γ和平移参数β是可训练的。 函数原型接口框架申请临时空间1",
      "函数原型": "inline void GroupNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamma, const LocalTensor<T>& beta, const LocalTensor<uint8_t>& sharedTmpBuffer, const T epsilon, GroupNormTiling& tiling)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename T, bool isReuseSource = false> __aicore__ inline void GroupNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamma, const LocalTensor<T>& beta, const T epsilon, GroupNormTiling& tiling) 通过sharedTmpBuffer入参传入临时空间1 2template <typename T, bool isReuseSource = false> __aicore__ inline void GroupNorm(const LocalTensor<T>& output, const LocalTensor<T>& outputMean, const LocalTensor<T>& outputVariance, const LocalTensor<T>& inputX, const LocalTensor<T>& gamma, const LocalTensor<T>& beta, const LocalTensor<uint8_t>& sharedTmpBuffer, const T epsilon, GroupNormTiling& tiling) 参数说明 表1 模板参数说明参数名 描述 T 操作数的数据类型。 Atlas A3 训练系列产品/Atlas A3 推理系列产品，支持的数据类型为：half/float Atlas A2 训练系列产品/Atlas 800I A2 推理产品/A200I A2 Box 异构组件，支持的数据类型为：half/float isReuseSource 是否允许修改源操作数，默认值为false。如果开发者允许源操作数被改写，可以使能该参数，使能后能够节省部分内存空间。 设置为true，则本接口内部计算时复用inputX的内存空间，节省内存空间；设置为false，则本接口内部计算时不复用inputX的内存空间。 对于float数据类型的输入支持开启该参数，half数据类型的输入不支持开启该参数。 isReuseSource的使用样例请参考更多样例。 表2 接口参数说明参数名 输入/输出 描述 output 输出 目的操作数，对标准化后的输入进行缩放和平移计算的结果。shape为[N, C, H, W]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 outputMean 输出 目的操作数，均值。shape为[N, groupNum]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 outputVariance 输出 目的操作数，方差。shape为[N, groupNum]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 inputX 输入 源操作数。shape为[N, C, H, W]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 gamma 输入 源操作数，缩放参数。该参数支持的取值范围为[-100, 100]。shape为[C]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 beta 输入 源操作数，平移参数。该参数支持的取值范围为[-100, 100]。shape为[C]。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 sharedTmpBuffer 输入 接口内部复杂计算时用于存储中间变量，由开发者提供。 类型为LocalTensor，支持的TPosition为VECIN/VECCALC/VECOUT。 临时空间大小BufferSize的获取方式请参考GroupNorm Tiling。 epsilon 输入 防除0的权重系数。数据类型需要与inputX/output保持一致。 tiling 输入 输入数据的切分信息，Tiling信息的获取请参考GroupNorm Tiling。 返回值说明无 约束说明操作数地址偏移对齐要求请参见通用约束。当前仅支持ND格式的输入，不支持其他格式。 调用示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74template <typename dataType, bool isReuseSource = false> __aicore__ inline void MainGroupnormTest(GM_ADDR inputXGm, GM_ADDR gammGm, GM_ADDR betaGm, GM_ADDR outputGm, uint32_t n, uint32_t c, uint32_t h, uint32_t w, uint32_t g)"
    },
    {
      "API名称": "MetricsProfStart",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1214.html",
      "功能说明": "用于设置性能数据采集信号启动，和MetricsProfStop配合使用。使用msProf工具进行算子上板调优时，可在kernel侧代码段前后分别调用MetricsProfStart和MetricsProfStop来指定需要调优的代码段范围。 __aicore__ inline void MetricsProfStart()",
      "函数原型": "__aicore__ inline void MetricsProfStart() 参数说明 无 返回值 无 约束说明 无 调用示例 1 MetricsProfStart()",
      "参数说明": [],
      "返回值": "无",
      "调用示例": "__aicore__ inline void MetricsProfStart() 参数说明 无 返回值 无 约束说明 无 调用示例 1 MetricsProfStart()"
    },
    {
      "API名称": "SetAippFunctions",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0240.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TopK",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0836.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Asin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0496.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "AscendAntiQuant",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0822.html",
      "功能说明": "PER_CHANNEL场景（按通道量化）不使能输入转置groupSize = src.shape[0] / offset.shape[0] dst[i][j] = scale[i / groupSize][j] * (src[i][j] + offset[i / groupSize][j]) 使能输入转置groupSize = src.shape[1] / offset.shape[1] dst[i][j] = scale[i][j / groupSize] * (src[i][j] + offset[i][j / groupSize])",
      "函数原型": "__aicore__ inline void AscendAntiQuant(const LocalTensor<OutputDataType> &dst, const LocalTensor<InputDataType> &src, const LocalTensor<OutputDataType> &offset, const LocalTensor<OutputDataType> &scale, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t K, const AntiQuantShapeInfo& shapeInfo = {})",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/int4b_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t/int4b_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int8_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/bfloat16_t"
        }
      ],
      "返回值": "函数原型通过sharedTmpBuffer入参传入临时空间PER_CHANNEL场景（按通道量化）1",
      "调用示例": "template <typename InputDataType, typename OutputDataType, bool isTranspose> __aicore__ inline void AscendAntiQuant(const LocalTensor<OutputDataType> &dst, const LocalTensor<InputDataType> &src, const LocalTensor<OutputDataType> &offset, const LocalTensor<OutputDataType> &scale, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t K, const AntiQuantShapeInfo& shapeInfo = {})"
    },
    {
      "API名称": "Exp",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0589.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SubRelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0046.html",
      "功能说明": "按元素求差，再进行Relu计算（结果和0对比取较大值）。计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void SubRelu(const LocalTensor<T>& dstLocal, const LocalTensor<T>& src0Local, const LocalTensor<T>& src1Local, uint64_t mask[], const uint8_t repeatTimes, const BinaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[1 1 0 ... 0]",
      "调用示例": "输入数据(src0Local): [1 2 3 ... 512] 输入数据(src1Local): [0 1 4 ... 513] 输出数据(dstLocal): [1 1 0 ... 0]"
    },
    {
      "API名称": "Pad",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0849.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "GetCmpMask",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0223.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0108",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0108.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetHF32Mode",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0258.html",
      "功能说明": "函数原型1__aicore__ inline void SetHF32Mode(bool hf32Mode)",
      "函数原型": "__aicore__ inline void SetHF32Mode(bool hf32Mode)",
      "参数说明": [
        {
          "参数名": "支持如下两种取值",
          "类型": "",
          "说明": "true：L0A/L0B中的FP32数据将在矩阵乘法之前被舍入为HF32"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "将执行常规的FP32矩阵乘法"
        }
      ],
      "返回值": "无",
      "调用示例": "AscendC::SetHF32Mode(hf32Mode); 父主题： 矩阵计算(ISASI)"
    },
    {
      "API名称": "SetNextTaskStart",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_00087.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Unknown",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/basicdataapi/atlasopapi_07_00223.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Add",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0035.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "TRACE_STOP",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1213.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LoadData",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0238.html",
      "功能说明": "LoadData分为Load2D和Load3D，其功能分别如下： 源操作数/目的操作数的数据类型为uint8_t/int8_t时，分形矩阵大小在A1/A2上为16*32， 在B1/B2上为32*16。 源操作数/目的操作数的数据类型为uint16_t/int16_t/half/bfloat16_t时，分形矩阵在A1/B1/A2/B2上的大小为16*16。",
      "函数原型": "__aicore__ inline void LoadData(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData3DParamsV1<U>& loadDataParams) Load3Dv2接口 1 2 template <typename T, const IsResetLoad3dConfig &defaultConfig = IS_RESER_LOAD3D_DEFAULT_CONFIG, typename U = PrimT<T>, typename Std::enable_if<Std::is_same<PrimT<T>, U>::value, bool>::type = true> __aicore__ inline void LoadData(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData3DParamsV2<U>& loadDataParams)",
      "参数说明": [
        {
          "参数名": "Load2D接口",
          "类型": "",
          "说明": "Atlas 训练系列产品"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half"
        },
        {
          "参数名": "支持数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "支持数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "支持数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/uint16_t/int16_t/half/bfloat16_t/uint32_t/int32_t/float"
        },
        {
          "参数名": "Load3Dv1接口",
          "类型": "",
          "说明": "Atlas 训练系列产品"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "uint8_t/int8_t/half"
        },
        {
          "参数名": "Load3Dv2接口",
          "类型": "",
          "说明": "Atlas 推理系列产品"
        }
      ],
      "返回值": "无",
      "调用示例": "template <typename T> void LoadData(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData2DParams& loadDataParams) template <typename T> void LoadData(const LocalTensor<T>& dstLocal, const GlobalTensor<T>& srcLocal, const LoadData2DParams& loadDataParams) Load3Dv1接口 1 2 template <typename T, const IsResetLoad3dConfig &defaultConfig = IS_RESER_LOAD3D_DEFAULT_CONFIG, typename U = PrimT<T>, typename Std::enable_if<Std::is_same<PrimT<T>, U>::value, bool>::type = true> __aicore__ inline void LoadData(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData3DParamsV1<U>& loadDataParams) Load3Dv2接口 1 2 template <typename T, const IsResetLoad3dConfig &defaultConfig = IS_RESER_LOAD3D_DEFAULT_CONFIG, typename U = PrimT<T>, typename Std::enable_if<Std::is_same<PrimT<T>, U>::value, bool>::type = true> __aicore__ inline void LoadData(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData3DParamsV2<U>& loadDataParams)"
    },
    {
      "API名称": "Adds",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0054.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "BlockReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0084.html",
      "功能说明": "对每个datablock内所有元素求和。源操作数相加采用二叉树方式，两两相加。归约指令的总体介绍请参考如何使用归约指令。 以128个half类型的数据求和为例，每个datablock可以计算16个half类型数据，分成8个datablock进行计算；每个datablock内，通过二叉树的方式，两两相加，BlockReduceSum求和示意图如下。 图1 BlockReduceSum求和示意图 需要注意的是两两相加的计算过程中，计算结果大于65504时结果保存为65504。例如，源操作数为[60000,60000,-30000,100]，首先60000+60000溢出，结果为65504，然后计算-30000+100=-29900，最后计算65504-29900=35604，计算示意图如下图所示。",
      "函数原型": "inline void BlockReduceSum (const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal,const int32_t repeat, const uint64_t mask[], const int32_t dstRepStride, const int32_t srcBlkStride, const int32_t srcRepStride)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[-10.27, ..., -23.77, 0, ..., 0]",
      "调用示例": "int32_t mask = 256/sizeof(half);"
    },
    {
      "API名称": "MulCast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0049.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "x",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0221.html",
      "功能说明": "根据padMode（pad模式）与padSide（pad方向）对源操作数按照datablock进行填充操作。 假设源操作数的一个datablock有16个数，datablock[0:15]=a~p： padSide==false：从datablock的左边开始填充，即datablock的起始值方向(a->p) padSide==true：从datablock的右边开始填充，即datablock的结束值方向(p->a)",
      "函数原型": "inline void VectorPadding(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const uint8_t padMode, const bool padSide, const uint64_t mask[], const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "int16_t/uint16_t/half/int32_t/uint32_t/float"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "[0,2]"
        },
        {
          "参数名": "false",
          "类型": "",
          "说明": "左边"
        },
        {
          "参数名": "true",
          "类型": "",
          "说明": "右边"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[6.938 6.938 6.938 ... 6.938 6.938]",
      "调用示例": "输入数据(srcLocal): [6.938 -8.86 -0.2263 ... 1.971 1.778] 输出数据(dstLocal):"
    },
    {
      "API名称": "DataCopy",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0105.html",
      "功能说明": "函数原型源操作数为GlobalTensor，目的操作数为LocalTensor（只支持ND2NZ格式转换）1 2template <typename T> __aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const GlobalTensor<T>& srcGlobal, const Nd2NzParams& intriParams); 该原型接口支持的数据通路和数据类型如下所示：",
      "函数原型": "__aicore__ inline void DataCopy(const LocalTensor<T>& dstLocal, const GlobalTensor<T>& srcGlobal, const Nd2NzParams& intriParams)",
      "参数说明": [
        {
          "参数名": "该原型接口支持的数据通路和数据类型如下所示",
          "类型": "",
          "说明": "表3 数据通路和数据类型（源操作数为LocalTensor，目的操作数为GlobalTensor）支持型号"
        },
        {
          "参数名": "该原型接口支持的数据通路和数据类型如下所示",
          "类型": "",
          "说明": "表4 数据通路和数据类型（源操作数为LocalTensor，目的操作数为LocalTensor）支持型号"
        },
        {
          "参数名": "该原型接口支持的数据通路和数据类型如下所示",
          "类型": "",
          "说明": "表5 数据通路和数据类型（源操作数为LocalTensor，目的操作数为LocalTensor）支持型号"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "ndNum∈[0, 4095]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "nValue∈[0, 16384]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "dValue∈[0, 65535]"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "srcNdMatrixStride∈[0, 65535]，单位为元素"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "srcDValue∈[1, 65535]，单位为元素"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "dstNzC0Stride∈[1, 16384]，单位：C0_SIZE（32B）"
        },
        {
          "参数名": "取值范围",
          "类型": "",
          "说明": "dstNzNStride∈[1, 16384]，单位：C0_SIZE（32B）"
        }
      ],
      "返回值": "2",
      "调用示例": "输入数据(srcGlobal): [1 2 3 ... 1024] 输出数据(dstGlobal):[1 2 ... 15 16 513 514 ... 527 528 17 18 ... 31 32 529 530 ... 543 544 ...497 498 ... 511 512 1009 1010... 1023 1024]随路格式转换数据搬运，通路：CO1->A1、CO1->GM示例：mmad含有矩阵乘偏置，左矩阵和右矩阵的数据类型为int8_t，结果矩阵的数据类型为int32_t。量化模式DEQF16，scalar量化参数为0.5，将mmad计算出的结果由int32_t量化成half并搬出。 1"
    },
    {
      "API名称": "Sinh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0524.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Cast",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1193.html",
      "功能说明": "函数原型const aclTensor *Cast(const aclTensor *self, op::DataType dstDtype, aclOpExecutor *executor)",
      "函数原型": ":DataType dstDtype, aclOpExecutor *executor)",
      "参数说明": [
        {
          "参数名": "说明",
          "类型": "",
          "说明": "BFLOAT16适用于如下产品型号："
        },
        {
          "参数名": "说明",
          "类型": "",
          "说明": "BFLOAT16适用于如下产品型号："
        }
      ],
      "返回值": "无",
      "调用示例": "auto uniqueExecutor = CREATE_EXECUTOR();"
    },
    {
      "API名称": "instantiation_num_",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/basicdataapi/atlasopapi_07_00002.html",
      "功能说明": "本类用于描述算子原型定义中输入输出信息与算子实例化后实际输入输出之间的映射关系。",
      "函数原型": "原型定义的输入或输出在实际输入或输出中对应的实例数量。instance_start_：原型定义的输入或输出在实际输入或输出中的起始索引位置。",
      "参数说明": [],
      "返回值": "instantiation_num_：原型定义的输入或输出在实际输入或输出中对应的实例数量。instance_start_：原型定义的输入或输出在实际输入或输出中的起始索引位置。",
      "调用示例": ""
    },
    {
      "API名称": "ReduceMax",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0076.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceSum",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0078.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ReduceMin",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10056.html",
      "功能说明": "定义指定计算的维度（Reduce轴）为R轴，非指定维度（Normal轴）为A轴。如下图所示，对shape为(2, 3)的二维矩阵进行运算，指定在第一维求最小值，输出结果为[[1, 2, 3]]；指定在第二维求最小值，输出结果为[[1] [4]]。 图1 ReduceMin按第一个维度计算示例 图2 ReduceMin按最后一个维度计算示例 函数原型通过sharedTmpBuffer入参传入临时空间1",
      "函数原型": "inline void ReduceMin(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t srcShape[], bool srcInnerPad)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "AR表示对二维向量进行ReduceMin计算",
          "类型": "",
          "说明": "第一维是Normal轴，第二维是Reduce轴，即对第二维数据求最小值"
        },
        {
          "参数名": "pattern是定义在AscendC",
          "类型": "",
          "说明": ":Pattern::Reduce命名空间下的结构体，其成员变量用户无需关注"
        }
      ],
      "返回值": "[-1.0 -9.0]",
      "调用示例": "2template <class T, class pattern, bool isReuseSource = false> __aicore__ inline void ReduceMin(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const LocalTensor<uint8_t> &sharedTmpBuffer, const uint32_t srcShape[], bool srcInnerPad) 2template <class T, class pattern, bool isReuseSource = false> __aicore__ inline void ReduceMin(const LocalTensor<T> &dstTensor, const LocalTensor<T> &srcTensor, const uint32_t srcShape[], bool srcInnerPad)"
    },
    {
      "API名称": "LeakyRelu",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0060.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "LoadDataWithTranspose",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0239.html",
      "功能说明": "下面通过示例来讲解接口功能和关键参数：下文图中一个N形或者一个Z形代表一个分形。 对于uint8_t/int8_t数据类型，每次迭代处理32*32*1B数据，可处理2个分形(一个分形512B)，每次迭代中，源操作数中2个连续的16*32分形将被合并为1个32*32的方块矩阵，基于方块矩阵做转置，转置后分裂为2个16*32分形，根据目的操作数分形间隔等参数可以有不同的排布。如下图示例：因为每次迭代处理32*32*1B数据，需要3次迭代可以完成，repeatTimes = 3；srcStride = 1，表示相邻迭代间，源操作数前一个方块矩阵与后一个方块矩阵起始地址的间隔为1（单位：32*32*1B），这里的单位实际上是拼接后的方块矩阵的大小；dstGap = 1，表示相邻迭代间，目的操作数前一个迭代第一个分形的结束地址到下一个迭代第一个分形起始地址的间隔为1（单位：512B）；dstFracGap = 0，表示每个迭代内目的操作数前一个分形的结束地址与后一个分形起始地址的间隔为0（单位：512B）。 repeatTimes和srcStride的解释和上图示例一致。dstGap = 0，表示相邻迭代间，目的操作数前一个迭代第一个分形的结束地址和下一个迭代第一个分形起始地址无间隔。dstFracGap = 2，表示每个迭代内目的操作数前一个分形的结束地址与后一个分形起始地址的间隔为2（单位：512B）。",
      "函数原型": "__aicore__ inline void LoadDataWithTranspose(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, const LoadData2dTransposeParams& loadDataParams)",
      "参数说明": [
        {
          "参数名": "下面通过示例来讲解接口功能和关键参数",
          "类型": "",
          "说明": "下文图中一个N形或者一个Z形代表一个分形"
        }
      ],
      "返回值": "2",
      "调用示例": "对于uint8_t/int8_t数据类型，每次迭代处理32*32*1B数据，可处理2个分形(一个分形512B)，每次迭代中，源操作数中2个连续的16*32分形将被合并为1个32*32的方块矩阵，基于方块矩阵做转置，转置后分裂为2个16*32分形，根据目的操作数分形间隔等参数可以有不同的排布。如下图示例：因为每次迭代处理32*32*1B数据，需要3次迭代可以完成，repeatTimes = 3；srcStride = 1，表示相邻迭代间，源操作数前一个方块矩阵与后一个方块矩阵起始地址的间隔为1（单位：32*32*1B），这里的单位实际上是拼接后的方块矩阵的大小；dstGap = 1，表示相邻迭代间，目的操作数前一个迭代第一个分形的结束地址到下一个迭代第一个分形起始地址的间隔为1（单位：512B）；dstFracGap = 0，表示每个迭代内目的操作数前一个分形的结束地址与后一个分形起始地址的间隔为0（单位：512B）。 对于half/bfloat16_t数据类型，每次迭代处理16*16*2B数据，可处理1个分形(一个分形512B)，每次迭代中，源操作数中1个16*16分形将被转置。因为每次迭代处理16*16*2B数据，需要3次迭代可以完成，repeatTimes = 3；srcStride = 1，表示相邻迭代间，源操作数前一个方块矩阵与后一个方块矩阵起始地址的间隔为1 （单位：16*16*2B）；dstGap = 0，表示相邻迭代间，目的操作数前一个迭代第一个分形的结束地址到下一个迭代第一个分形起始地址无间隔；该场景下，因为其分形即为方块矩阵，每个迭代处理一个分形，不存在迭代内分形的间隔，该参数设置无效。 对于int4b_t数据类型，每次迭代处理64*64*0.5B数据，可处理4个分形(一个分形512B)，每次迭代中，源操作数中4个连续的16*64分形将被合并为1个64*64的方块矩阵，基于方块矩阵做转置，转置后分裂为4个16*64分形，根据目的操作数分形间隔等参数可以有不同的排布。int4b_t数据类型需要两个数拼成一个int8_t或uint8_t的数，拼凑的规则如下："
    },
    {
      "API名称": "is_convertible",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10114.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "OpAttrDef",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0976.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Acosh",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0564.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetAtomicType",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0211.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Exp",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0025.html",
      "功能说明": "按元素取自然指数，计算公式如下： tensor前n个数据计算",
      "函数原型": "inline void Exp(const LocalTensor<T>& dstLocal, const LocalTensor<T>& srcLocal, uint64_t mask[], const uint8_t repeatTimes, const UnaryRepeatParams& repeatParams)",
      "参数说明": [
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "支持的数据类型为",
          "类型": "",
          "说明": "half/float"
        },
        {
          "参数名": "逐bit模式",
          "类型": "",
          "说明": "可以按位控制哪些元素参与计算，bit位的值为1表示参与计算，0表示不参与"
        },
        {
          "参数名": "连续模式",
          "类型": "",
          "说明": "表示前面连续的多少个元素参与计算"
        }
      ],
      "返回值": "[1.0 2.719 7.391 20.08 ...]",
      "调用示例": "输入数据(srcLocal): [0.0 1.0 2.0 3.0 ...] 输出数据(dstLocal):"
    },
    {
      "API名称": "ReduceMean",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10157.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0178",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0178.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0289",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0289.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0999",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0999.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_1026",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1026.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0868",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0868.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "SetTiling",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0978.html",
      "功能说明": "注册Tiling函数。Tiling函数的原型是固定的，接受一个TilingContext作为输入，在此context上可以获取到输入、输出的Shape指针等内容。注册的Tiling函数由框架调用，调用时会传入TilingContext参数。 OpAICoreDef &SetTiling(gert::OpImplRegisterV2::TilingKernelFunc func)",
      "函数原型": "",
      "参数说明": [
        {
          "参数名": "gert",
          "类型": "",
          "说明": ":OpImplRegisterV2::TilingKernelFunc func)"
        },
        {
          "参数名": "TilingKernelFunc类型定义如下",
          "类型": "",
          "说明": "1"
        }
      ],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "Input",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0988.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ADD_TO_LAUNCHER_LIST_AICORE",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_1043.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_10005",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_10005.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "ParamType",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0957.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    },
    {
      "API名称": "API_0307",
      "API文档URL": "https://www.hiascend.com/document/detail/zh/canncommercial/82RC1/API/ascendcopapi/atlasascendc_api_07_0307.html",
      "功能说明": "",
      "函数原型": "",
      "参数说明": [],
      "返回值": "无",
      "调用示例": ""
    }
  ],
  "错误信息": {}
}